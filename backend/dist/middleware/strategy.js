"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.localStrategy = exports.jwtStrategy = exports.customerStrategy = void 0;
var _passport = _interopRequireDefault(require("passport"));
var _jsonwebtoken = _interopRequireDefault(require("jsonwebtoken"));
var _config = _interopRequireDefault(require("../config"));
var JWTSign = function JWTSign(iss, user, date) {
  return _jsonwebtoken["default"].sign({
    iss: iss,
    sub: user.id,
    iam: user.type,
    iat: date.getTime(),
    exp: new Date().setMinutes(date.getMinutes() + 30)
  }, _config["default"].app.secret);
};
var jwtStrategy = function jwtStrategy(req, res, next) {
  _passport["default"].authenticate('user-jwt', {
    session: false
  }, function (err, user, info) {
    var contype = req.headers['content-type'];
    var json = !(!contype || contype.indexOf('application/json') !== 0);
    if (err && err == 'expired') {
      return json ? res.status(500).json({
        errors: ['Session is expired']
      }) : res.redirect('/auth/login');
    }
    if (err && err == 'invalid') {
      return json ? res.status(500).json({
        errors: ['Invalid token recieved']
      }) : res.redirect('/logout');
    }
    if (err && err == 'user') {
      return json ? res.status(500).json({
        errors: ['Invalid user recieved']
      }) : res.redirect('/logout');
    }
    if (err && Object.keys(err).length) {
      return res.status(500).json({
        errors: [err]
      });
    }
    if (err) {
      return res.status(500).json({
        errors: ['Invalid user recieved']
      });
    }
    if (!user) {
      return json ? res.status(500).json({
        errors: ['Invalid user recieved']
      }) : res.redirect('/logout');
    }
    req.user = user;
    next();
  })(req, res, next);
};
exports.jwtStrategy = jwtStrategy;
var localStrategy = function localStrategy(req, res, next) {
  _passport["default"].authenticate('user-local', {
    session: false
  }, function (err, user, info) {
    console.log(err);
    if (err && err == 'invalid') {
      return res.status(500).json({
        errors: ['Email Id not verified']
      });
    }
    if (err && err == 'attempt') {
      return res.status(500).json({
        errors: ['Too many invalid attempts. Please reset your password.']
      });
    }
    if (err && err.startsWith('attempt:')) {
      return res.status(500).json({
        errors: ['Invalid Credentials (' + err.split(':')[1] + ' Attempt(s) Left)']
      });
    }
    if (err) {
      return res.status(500).json({
        errors: [err]
      });
    }
    if (!user) {
      return res.status(500).json({
        errors: ['Invalid Credentials']
      });
    }
    req.user = user;
    next();
  })(req, res, next);
};
exports.localStrategy = localStrategy;
var customerStrategy = function customerStrategy(req, res, next) {
  _passport["default"].authenticate('customer-local', {
    session: false
  }, function (err, user, info) {
    if (err && err == 'invalid') {
      return res.status(500).json({
        errors: ['Email Id not verified']
      });
    }
    if (err && err == 'attempt') {
      return res.status(500).json({
        errors: ['Too many invalid attempts. Please reset your password.']
      });
    }
    if (err && err.startsWith('attempt:')) {
      return res.status(500).json({
        errors: ['Invalid Credentials (' + err.split(':')[1] + ' Attempt(s) Left)']
      });
    }
    if (err) {
      return res.status(500).json({
        errors: [err]
      });
    }
    if (!user) {
      return res.status(500).json({
        errors: ['Invalid Credentials']
      });
    }
    req.user = user;
    next();
  })(req, res, next);
};
exports.customerStrategy = customerStrategy;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,