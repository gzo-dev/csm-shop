"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("dotenv/config");
var _models = require("./models");
var _api = require("./api");
var _config2 = _interopRequireDefault(require("./config"));
var _app = _interopRequireDefault(require("./app"));
require("./errors");
var _scheduler = _interopRequireDefault(require("./scheduler"));
var _path = _interopRequireDefault(require("path"));
var _cors = _interopRequireDefault(require("cors"));
// import kue from './kue';

global.appRoot = _path["default"].resolve(__dirname);
var PORT = _config2["default"].app.port;
var app = _app["default"].setup(_config2["default"]);

/*cors handling*/
app.use((0, _cors["default"])({
  origin: true,
  credentials: true
}));
app.options('*', (0, _cors["default"])());

/* Route handling */
app.use('/api', _api.restRouter);
// app.use('/', webRouter);

app.use(function (error, req, res, next) {
  if (!(error instanceof RequestError)) {
    error = new RequestError('Some Error Occurred', 500, error.message);
  }
  error.status = error.status || 500;
  res.status(error.status);
  var contype = req.headers['content-type'];
  var json = !(!contype || contype.indexOf('application/json') !== 0);
  if (json) {
    return res.json({
      errors: error.errorList
    });
  } else {
    res.render(error.status.toString(), {
      layout: null
    });
  }
});

// kue.init();
/* Database Connection */
_models.db.sequelize.authenticate().then(function () {
  console.log('Nice! Database looks fine');
  _scheduler["default"].init();
})["catch"](function (err) {
  console.log(err, "Something went wrong with the Database Update!");
});

/* Start Listening service */
app.listen(PORT, function () {
  console.log("Server is running at PORT http://localhost:".concat(PORT));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1aXJlIiwiX21vZGVscyIsIl9hcGkiLCJfY29uZmlnMiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfYXBwIiwiX3NjaGVkdWxlciIsIl9wYXRoIiwiX2NvcnMiLCJnbG9iYWwiLCJhcHBSb290IiwicGF0aCIsInJlc29sdmUiLCJfX2Rpcm5hbWUiLCJQT1JUIiwiY29uZmlnIiwiYXBwIiwicG9ydCIsImFwcE1hbmFnZXIiLCJzZXR1cCIsInVzZSIsImNvcnMiLCJvcmlnaW4iLCJjcmVkZW50aWFscyIsIm9wdGlvbnMiLCJyZXN0Um91dGVyIiwiZXJyb3IiLCJyZXEiLCJyZXMiLCJuZXh0IiwiUmVxdWVzdEVycm9yIiwibWVzc2FnZSIsInN0YXR1cyIsImNvbnR5cGUiLCJoZWFkZXJzIiwianNvbiIsImluZGV4T2YiLCJlcnJvcnMiLCJlcnJvckxpc3QiLCJyZW5kZXIiLCJ0b1N0cmluZyIsImxheW91dCIsImRiIiwic2VxdWVsaXplIiwiYXV0aGVudGljYXRlIiwidGhlbiIsImNvbnNvbGUiLCJsb2ciLCJzY2hlZHVsZXIiLCJpbml0IiwiZXJyIiwibGlzdGVuIiwiY29uY2F0Il0sInNvdXJjZXMiOlsiLi4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnZG90ZW52L2NvbmZpZyc7XG5pbXBvcnQgeyBkYiB9IGZyb20gJy4vbW9kZWxzJztcbmltcG9ydCB7IHJlc3RSb3V0ZXIgfSBmcm9tICcuL2FwaSc7XG5pbXBvcnQgY29uZmlnIGZyb20gJy4vY29uZmlnJztcbmltcG9ydCBhcHBNYW5hZ2VyIGZyb20gJy4vYXBwJztcbi8vIGltcG9ydCBrdWUgZnJvbSAnLi9rdWUnO1xuaW1wb3J0ICcuL2Vycm9ycyc7XG5pbXBvcnQgc2NoZWR1bGVyIGZyb20gJy4vc2NoZWR1bGVyJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IGNvcnMgZnJvbSAnY29ycyc7XG5cbmdsb2JhbC5hcHBSb290ID0gcGF0aC5yZXNvbHZlKF9fZGlybmFtZSk7XG5cbmNvbnN0IFBPUlQgPSBjb25maWcuYXBwLnBvcnQ7XG5jb25zdCBhcHAgPSBhcHBNYW5hZ2VyLnNldHVwKGNvbmZpZyk7XG5cbi8qY29ycyBoYW5kbGluZyovXG5hcHAudXNlKGNvcnMoe1xuXHRvcmlnaW46dHJ1ZSxcbiAgICBjcmVkZW50aWFsczp0cnVlXG59KSk7XG5hcHAub3B0aW9ucygnKicsIGNvcnMoKSk7XG5cbi8qIFJvdXRlIGhhbmRsaW5nICovXG5hcHAudXNlKCcvYXBpJywgcmVzdFJvdXRlcik7XG4vLyBhcHAudXNlKCcvJywgd2ViUm91dGVyKTtcblxuYXBwLnVzZSgoZXJyb3IsIHJlcSwgcmVzLCBuZXh0KSA9PiB7XG5cdGlmICghKGVycm9yIGluc3RhbmNlb2YgUmVxdWVzdEVycm9yKSkge1xuXHRcdGVycm9yID0gbmV3IFJlcXVlc3RFcnJvcignU29tZSBFcnJvciBPY2N1cnJlZCcsIDUwMCwgZXJyb3IubWVzc2FnZSk7XG4gICAgfVxuXHRcdGVycm9yLnN0YXR1cyA9IGVycm9yLnN0YXR1cyB8fCA1MDA7XG5cdHJlcy5zdGF0dXMoZXJyb3Iuc3RhdHVzKTtcblx0bGV0IGNvbnR5cGUgPSByZXEuaGVhZGVyc1snY29udGVudC10eXBlJ107XG5cdHZhciBqc29uID0gISghY29udHlwZSB8fCBjb250eXBlLmluZGV4T2YoJ2FwcGxpY2F0aW9uL2pzb24nKSAhPT0gMCk7XG5cdGlmIChqc29uKSB7XG5cdFx0cmV0dXJuIHJlcy5qc29uKHsgZXJyb3JzOiBlcnJvci5lcnJvckxpc3QgfSk7XG5cdH0gZWxzZSB7XG5cdFx0cmVzLnJlbmRlcihlcnJvci5zdGF0dXMudG9TdHJpbmcoKSwge2xheW91dDogbnVsbH0pXG5cdH1cbn0pO1xuXG4vLyBrdWUuaW5pdCgpO1xuLyogRGF0YWJhc2UgQ29ubmVjdGlvbiAqL1xuZGIuc2VxdWVsaXplLmF1dGhlbnRpY2F0ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRjb25zb2xlLmxvZygnTmljZSEgRGF0YWJhc2UgbG9va3MgZmluZScpO1xuXHRzY2hlZHVsZXIuaW5pdCgpO1xufSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuXHRjb25zb2xlLmxvZyhlcnIsIFwiU29tZXRoaW5nIHdlbnQgd3Jvbmcgd2l0aCB0aGUgRGF0YWJhc2UgVXBkYXRlIVwiKVxufSk7XG5cbi8qIFN0YXJ0IExpc3RlbmluZyBzZXJ2aWNlICovXG5hcHAubGlzdGVuKFBPUlQsICgpID0+IHtcblx0Y29uc29sZS5sb2coYFNlcnZlciBpcyBydW5uaW5nIGF0IFBPUlQgaHR0cDovL2xvY2FsaG9zdDoke1BPUlR9YCk7XG59KTsiXSwibWFwcGluZ3MiOiI7OztBQUFBQSxPQUFBO0FBQ0EsSUFBQUMsT0FBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsSUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsUUFBQSxHQUFBQyxzQkFBQSxDQUFBSixPQUFBO0FBQ0EsSUFBQUssSUFBQSxHQUFBRCxzQkFBQSxDQUFBSixPQUFBO0FBRUFBLE9BQUE7QUFDQSxJQUFBTSxVQUFBLEdBQUFGLHNCQUFBLENBQUFKLE9BQUE7QUFDQSxJQUFBTyxLQUFBLEdBQUFILHNCQUFBLENBQUFKLE9BQUE7QUFDQSxJQUFBUSxLQUFBLEdBQUFKLHNCQUFBLENBQUFKLE9BQUE7QUFKQTs7QUFNQVMsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLGdCQUFJLENBQUNDLE9BQU8sQ0FBQ0MsU0FBUyxDQUFDO0FBRXhDLElBQU1DLElBQUksR0FBR0MsbUJBQU0sQ0FBQ0MsR0FBRyxDQUFDQyxJQUFJO0FBQzVCLElBQU1ELEdBQUcsR0FBR0UsZUFBVSxDQUFDQyxLQUFLLENBQUNKLG1CQUFNLENBQUM7O0FBRXBDO0FBQ0FDLEdBQUcsQ0FBQ0ksR0FBRyxDQUFDLElBQUFDLGdCQUFJLEVBQUM7RUFDWkMsTUFBTSxFQUFDLElBQUk7RUFDUkMsV0FBVyxFQUFDO0FBQ2hCLENBQUMsQ0FBQyxDQUFDO0FBQ0hQLEdBQUcsQ0FBQ1EsT0FBTyxDQUFDLEdBQUcsRUFBRSxJQUFBSCxnQkFBSSxFQUFDLENBQUMsQ0FBQzs7QUFFeEI7QUFDQUwsR0FBRyxDQUFDSSxHQUFHLENBQUMsTUFBTSxFQUFFSyxlQUFVLENBQUM7QUFDM0I7O0FBRUFULEdBQUcsQ0FBQ0ksR0FBRyxDQUFDLFVBQUNNLEtBQUssRUFBRUMsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLElBQUksRUFBSztFQUNsQyxJQUFJLEVBQUVILEtBQUssWUFBWUksWUFBWSxDQUFDLEVBQUU7SUFDckNKLEtBQUssR0FBRyxJQUFJSSxZQUFZLENBQUMscUJBQXFCLEVBQUUsR0FBRyxFQUFFSixLQUFLLENBQUNLLE9BQU8sQ0FBQztFQUNqRTtFQUNGTCxLQUFLLENBQUNNLE1BQU0sR0FBR04sS0FBSyxDQUFDTSxNQUFNLElBQUksR0FBRztFQUNuQ0osR0FBRyxDQUFDSSxNQUFNLENBQUNOLEtBQUssQ0FBQ00sTUFBTSxDQUFDO0VBQ3hCLElBQUlDLE9BQU8sR0FBR04sR0FBRyxDQUFDTyxPQUFPLENBQUMsY0FBYyxDQUFDO0VBQ3pDLElBQUlDLElBQUksR0FBRyxFQUFFLENBQUNGLE9BQU8sSUFBSUEsT0FBTyxDQUFDRyxPQUFPLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUM7RUFDbkUsSUFBSUQsSUFBSSxFQUFFO0lBQ1QsT0FBT1AsR0FBRyxDQUFDTyxJQUFJLENBQUM7TUFBRUUsTUFBTSxFQUFFWCxLQUFLLENBQUNZO0lBQVUsQ0FBQyxDQUFDO0VBQzdDLENBQUMsTUFBTTtJQUNOVixHQUFHLENBQUNXLE1BQU0sQ0FBQ2IsS0FBSyxDQUFDTSxNQUFNLENBQUNRLFFBQVEsQ0FBQyxDQUFDLEVBQUU7TUFBQ0MsTUFBTSxFQUFFO0lBQUksQ0FBQyxDQUFDO0VBQ3BEO0FBQ0QsQ0FBQyxDQUFDOztBQUVGO0FBQ0E7QUFDQUMsVUFBRSxDQUFDQyxTQUFTLENBQUNDLFlBQVksQ0FBQyxDQUFDLENBQUNDLElBQUksQ0FBQyxZQUFZO0VBQzVDQyxPQUFPLENBQUNDLEdBQUcsQ0FBQywyQkFBMkIsQ0FBQztFQUN4Q0MscUJBQVMsQ0FBQ0MsSUFBSSxDQUFDLENBQUM7QUFDakIsQ0FBQyxDQUFDLFNBQU0sQ0FBQyxVQUFVQyxHQUFHLEVBQUU7RUFDdkJKLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDRyxHQUFHLEVBQUUsZ0RBQWdELENBQUM7QUFDbkUsQ0FBQyxDQUFDOztBQUVGO0FBQ0FsQyxHQUFHLENBQUNtQyxNQUFNLENBQUNyQyxJQUFJLEVBQUUsWUFBTTtFQUN0QmdDLE9BQU8sQ0FBQ0MsR0FBRywrQ0FBQUssTUFBQSxDQUErQ3RDLElBQUksQ0FBRSxDQUFDO0FBQ2xFLENBQUMsQ0FBQyJ9