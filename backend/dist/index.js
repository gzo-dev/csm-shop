"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("dotenv/config");
var _models = require("./models");
var _api = require("./api");
var _config2 = _interopRequireDefault(require("./config"));
var _app = _interopRequireDefault(require("./app"));
require("./errors");
var _scheduler = _interopRequireDefault(require("./scheduler"));
var _path = _interopRequireDefault(require("path"));
var _cors = _interopRequireDefault(require("cors"));
var _cronjob = _interopRequireDefault(require("./cronjob"));
// import kue from './kue';

global.appRoot = _path["default"].resolve(__dirname);
var PORT = _config2["default"].app.port;
var app = _app["default"].setup(_config2["default"]);

/*cors handling*/
app.use((0, _cors["default"])());
app.options('*', (0, _cors["default"])());

/* Route handling */
app.use('/api', _api.restRouter);
// app.use('/', webRouter);

app.use(function (error, req, res, next) {
  if (!(error instanceof RequestError)) {
    error = new RequestError('Some Error Occurred', 500, error.message);
  }
  error.status = error.status || 500;
  res.status(error.status);
  var contype = req.headers['content-type'];
  var json = !(!contype || contype.indexOf('application/json') !== 0);
  if (json) {
    return res.json({
      errors: error.errorList
    });
  } else {
    res.render(error.status.toString(), {
      layout: null
    });
  }
});

// kue.init();
/* Database Connection */
_models.db.sequelize.authenticate().then(function () {
  console.log('Nice! Database looks fine');
  _scheduler["default"].init();
})["catch"](function (err) {
  console.log(err, "Something went wrong with the Database Update!");
});
_cronjob["default"].start();

/* Start Listening service */
app.listen(PORT, function () {
  console.log("Server is running at PORT http://localhost:".concat(PORT));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1aXJlIiwiX21vZGVscyIsIl9hcGkiLCJfY29uZmlnMiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfYXBwIiwiX3NjaGVkdWxlciIsIl9wYXRoIiwiX2NvcnMiLCJfY3JvbmpvYiIsImdsb2JhbCIsImFwcFJvb3QiLCJwYXRoIiwicmVzb2x2ZSIsIl9fZGlybmFtZSIsIlBPUlQiLCJjb25maWciLCJhcHAiLCJwb3J0IiwiYXBwTWFuYWdlciIsInNldHVwIiwidXNlIiwiY29ycyIsIm9wdGlvbnMiLCJyZXN0Um91dGVyIiwiZXJyb3IiLCJyZXEiLCJyZXMiLCJuZXh0IiwiUmVxdWVzdEVycm9yIiwibWVzc2FnZSIsInN0YXR1cyIsImNvbnR5cGUiLCJoZWFkZXJzIiwianNvbiIsImluZGV4T2YiLCJlcnJvcnMiLCJlcnJvckxpc3QiLCJyZW5kZXIiLCJ0b1N0cmluZyIsImxheW91dCIsImRiIiwic2VxdWVsaXplIiwiYXV0aGVudGljYXRlIiwidGhlbiIsImNvbnNvbGUiLCJsb2ciLCJzY2hlZHVsZXIiLCJpbml0IiwiZXJyIiwiY2hlY2tFeHBpcmVkVm91Y2hlcnMiLCJzdGFydCIsImxpc3RlbiIsImNvbmNhdCJdLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ2RvdGVudi9jb25maWcnO1xuaW1wb3J0IHsgZGIgfSBmcm9tICcuL21vZGVscyc7XG5pbXBvcnQgeyByZXN0Um91dGVyIH0gZnJvbSAnLi9hcGknO1xuaW1wb3J0IGNvbmZpZyBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgYXBwTWFuYWdlciBmcm9tICcuL2FwcCc7XG4vLyBpbXBvcnQga3VlIGZyb20gJy4va3VlJztcbmltcG9ydCAnLi9lcnJvcnMnO1xuaW1wb3J0IHNjaGVkdWxlciBmcm9tICcuL3NjaGVkdWxlcic7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBjb3JzIGZyb20gJ2NvcnMnO1xuaW1wb3J0IGNoZWNrRXhwaXJlZFZvdWNoZXJzIGZyb20gJy4vY3JvbmpvYic7XG5nbG9iYWwuYXBwUm9vdCA9IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUpO1xuXG5jb25zdCBQT1JUID0gY29uZmlnLmFwcC5wb3J0O1xuY29uc3QgYXBwID0gYXBwTWFuYWdlci5zZXR1cChjb25maWcpO1xuXG4vKmNvcnMgaGFuZGxpbmcqL1xuYXBwLnVzZShjb3JzKCkpO1xuYXBwLm9wdGlvbnMoJyonLCBjb3JzKCkpO1xuXG4vKiBSb3V0ZSBoYW5kbGluZyAqL1xuYXBwLnVzZSgnL2FwaScsIHJlc3RSb3V0ZXIpO1xuLy8gYXBwLnVzZSgnLycsIHdlYlJvdXRlcik7XG5cbmFwcC51c2UoKGVycm9yLCByZXEsIHJlcywgbmV4dCkgPT4ge1xuXHRpZiAoIShlcnJvciBpbnN0YW5jZW9mIFJlcXVlc3RFcnJvcikpIHtcblx0XHRlcnJvciA9IG5ldyBSZXF1ZXN0RXJyb3IoJ1NvbWUgRXJyb3IgT2NjdXJyZWQnLCA1MDAsIGVycm9yLm1lc3NhZ2UpO1xuICAgIH1cblx0XHRlcnJvci5zdGF0dXMgPSBlcnJvci5zdGF0dXMgfHwgNTAwO1xuXHRyZXMuc3RhdHVzKGVycm9yLnN0YXR1cyk7XG5cdGxldCBjb250eXBlID0gcmVxLmhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddO1xuXHR2YXIganNvbiA9ICEoIWNvbnR5cGUgfHwgY29udHlwZS5pbmRleE9mKCdhcHBsaWNhdGlvbi9qc29uJykgIT09IDApO1xuXHRpZiAoanNvbikge1xuXHRcdHJldHVybiByZXMuanNvbih7IGVycm9yczogZXJyb3IuZXJyb3JMaXN0IH0pO1xuXHR9IGVsc2Uge1xuXHRcdHJlcy5yZW5kZXIoZXJyb3Iuc3RhdHVzLnRvU3RyaW5nKCksIHtsYXlvdXQ6IG51bGx9KVxuXHR9XG59KTtcblxuLy8ga3VlLmluaXQoKTtcbi8qIERhdGFiYXNlIENvbm5lY3Rpb24gKi9cbmRiLnNlcXVlbGl6ZS5hdXRoZW50aWNhdGUoKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0Y29uc29sZS5sb2coJ05pY2UhIERhdGFiYXNlIGxvb2tzIGZpbmUnKTtcblx0c2NoZWR1bGVyLmluaXQoKTtcbn0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcblx0Y29uc29sZS5sb2coZXJyLCBcIlNvbWV0aGluZyB3ZW50IHdyb25nIHdpdGggdGhlIERhdGFiYXNlIFVwZGF0ZSFcIilcbn0pO1xuXG5jaGVja0V4cGlyZWRWb3VjaGVycy5zdGFydCgpXG5cbi8qIFN0YXJ0IExpc3RlbmluZyBzZXJ2aWNlICovXG5hcHAubGlzdGVuKFBPUlQsICgpID0+IHtcblx0Y29uc29sZS5sb2coYFNlcnZlciBpcyBydW5uaW5nIGF0IFBPUlQgaHR0cDovL2xvY2FsaG9zdDoke1BPUlR9YCk7XG59KTsiXSwibWFwcGluZ3MiOiI7OztBQUFBQSxPQUFBO0FBQ0EsSUFBQUMsT0FBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsSUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsUUFBQSxHQUFBQyxzQkFBQSxDQUFBSixPQUFBO0FBQ0EsSUFBQUssSUFBQSxHQUFBRCxzQkFBQSxDQUFBSixPQUFBO0FBRUFBLE9BQUE7QUFDQSxJQUFBTSxVQUFBLEdBQUFGLHNCQUFBLENBQUFKLE9BQUE7QUFDQSxJQUFBTyxLQUFBLEdBQUFILHNCQUFBLENBQUFKLE9BQUE7QUFDQSxJQUFBUSxLQUFBLEdBQUFKLHNCQUFBLENBQUFKLE9BQUE7QUFDQSxJQUFBUyxRQUFBLEdBQUFMLHNCQUFBLENBQUFKLE9BQUE7QUFMQTs7QUFNQVUsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLGdCQUFJLENBQUNDLE9BQU8sQ0FBQ0MsU0FBUyxDQUFDO0FBRXhDLElBQU1DLElBQUksR0FBR0MsbUJBQU0sQ0FBQ0MsR0FBRyxDQUFDQyxJQUFJO0FBQzVCLElBQU1ELEdBQUcsR0FBR0UsZUFBVSxDQUFDQyxLQUFLLENBQUNKLG1CQUFNLENBQUM7O0FBRXBDO0FBQ0FDLEdBQUcsQ0FBQ0ksR0FBRyxDQUFDLElBQUFDLGdCQUFJLEVBQUMsQ0FBQyxDQUFDO0FBQ2ZMLEdBQUcsQ0FBQ00sT0FBTyxDQUFDLEdBQUcsRUFBRSxJQUFBRCxnQkFBSSxFQUFDLENBQUMsQ0FBQzs7QUFFeEI7QUFDQUwsR0FBRyxDQUFDSSxHQUFHLENBQUMsTUFBTSxFQUFFRyxlQUFVLENBQUM7QUFDM0I7O0FBRUFQLEdBQUcsQ0FBQ0ksR0FBRyxDQUFDLFVBQUNJLEtBQUssRUFBRUMsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLElBQUksRUFBSztFQUNsQyxJQUFJLEVBQUVILEtBQUssWUFBWUksWUFBWSxDQUFDLEVBQUU7SUFDckNKLEtBQUssR0FBRyxJQUFJSSxZQUFZLENBQUMscUJBQXFCLEVBQUUsR0FBRyxFQUFFSixLQUFLLENBQUNLLE9BQU8sQ0FBQztFQUNqRTtFQUNGTCxLQUFLLENBQUNNLE1BQU0sR0FBR04sS0FBSyxDQUFDTSxNQUFNLElBQUksR0FBRztFQUNuQ0osR0FBRyxDQUFDSSxNQUFNLENBQUNOLEtBQUssQ0FBQ00sTUFBTSxDQUFDO0VBQ3hCLElBQUlDLE9BQU8sR0FBR04sR0FBRyxDQUFDTyxPQUFPLENBQUMsY0FBYyxDQUFDO0VBQ3pDLElBQUlDLElBQUksR0FBRyxFQUFFLENBQUNGLE9BQU8sSUFBSUEsT0FBTyxDQUFDRyxPQUFPLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUM7RUFDbkUsSUFBSUQsSUFBSSxFQUFFO0lBQ1QsT0FBT1AsR0FBRyxDQUFDTyxJQUFJLENBQUM7TUFBRUUsTUFBTSxFQUFFWCxLQUFLLENBQUNZO0lBQVUsQ0FBQyxDQUFDO0VBQzdDLENBQUMsTUFBTTtJQUNOVixHQUFHLENBQUNXLE1BQU0sQ0FBQ2IsS0FBSyxDQUFDTSxNQUFNLENBQUNRLFFBQVEsQ0FBQyxDQUFDLEVBQUU7TUFBQ0MsTUFBTSxFQUFFO0lBQUksQ0FBQyxDQUFDO0VBQ3BEO0FBQ0QsQ0FBQyxDQUFDOztBQUVGO0FBQ0E7QUFDQUMsVUFBRSxDQUFDQyxTQUFTLENBQUNDLFlBQVksQ0FBQyxDQUFDLENBQUNDLElBQUksQ0FBQyxZQUFZO0VBQzVDQyxPQUFPLENBQUNDLEdBQUcsQ0FBQywyQkFBMkIsQ0FBQztFQUN4Q0MscUJBQVMsQ0FBQ0MsSUFBSSxDQUFDLENBQUM7QUFDakIsQ0FBQyxDQUFDLFNBQU0sQ0FBQyxVQUFVQyxHQUFHLEVBQUU7RUFDdkJKLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDRyxHQUFHLEVBQUUsZ0RBQWdELENBQUM7QUFDbkUsQ0FBQyxDQUFDO0FBRUZDLG1CQUFvQixDQUFDQyxLQUFLLENBQUMsQ0FBQzs7QUFFNUI7QUFDQWxDLEdBQUcsQ0FBQ21DLE1BQU0sQ0FBQ3JDLElBQUksRUFBRSxZQUFNO0VBQ3RCOEIsT0FBTyxDQUFDQyxHQUFHLCtDQUFBTyxNQUFBLENBQStDdEMsSUFBSSxDQUFFLENBQUM7QUFDbEUsQ0FBQyxDQUFDIn0=