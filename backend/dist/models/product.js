'use strict';

module.exports = function (sequelize, DataTypes) {
  var product = sequelize.define('product', {
    categoryId: DataTypes.INTEGER,
    subCategoryId: DataTypes.INTEGER,
    childCategoryId: DataTypes.INTEGER,
    name: DataTypes.STRING,
    slug: DataTypes.STRING,
    brand: DataTypes.STRING,
    unitSize: DataTypes.STRING,
    status: DataTypes.STRING,
    buyerPrice: DataTypes.INTEGER,
    price: DataTypes.INTEGER,
    qty: DataTypes.INTEGER,
    discountPer: DataTypes.INTEGER,
    discount: DataTypes.INTEGER,
    total: DataTypes.INTEGER,
    netPrice: DataTypes.INTEGER,
    photo: DataTypes.STRING,
    sortDesc: DataTypes.TEXT,
    desc: DataTypes.TEXT,
    phoneNumber: DataTypes.TEXT,
    square: DataTypes.FLOAT,
    province: DataTypes.STRING,
    district: DataTypes.STRING,
    ward: DataTypes.STRING,
    provinceText: DataTypes.STRING,
    districtText: DataTypes.STRING,
    wardText: DataTypes.STRING,
    budget: DataTypes.FLOAT,
    typeRoom: DataTypes.STRING,
    interior: DataTypes.STRING,
    endow: DataTypes.INTEGER,
    rating: DataTypes.INTEGER,
    product_id: DataTypes.STRING,
    note: {
      type: DataTypes.TEXT,
      allowNull: true
    },
    user_manager: {
      type: DataTypes.INTEGER
    },
    rent: {
      type: DataTypes.BOOLEAN
    },
    author_phone: {
      type: DataTypes.STRING,
      allowNull: true
    },
    address: {
      type: DataTypes.TEXT,
      allowNull: true
    }
  }, {});
  product.associate = function (models) {
    // associations can be defined here
    models.product.belongsTo(models.SubCategory, {
      foreignKey: 'subCategoryId'
    });
    models.product.hasMany(models.productphoto, {
      foreignKey: 'productId'
    });
    models.product.belongsTo(models.SubChildCategory, {
      foreignKey: 'childCategoryId'
    });
    models.product.hasMany(models.vendor_product, {
      foreignKey: 'productId'
    });
    models.product.belongsTo(models.user, {
      foreignKey: 'user_manager'
    });
  };
  return product;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwic2VxdWVsaXplIiwiRGF0YVR5cGVzIiwicHJvZHVjdCIsImRlZmluZSIsImNhdGVnb3J5SWQiLCJJTlRFR0VSIiwic3ViQ2F0ZWdvcnlJZCIsImNoaWxkQ2F0ZWdvcnlJZCIsIm5hbWUiLCJTVFJJTkciLCJzbHVnIiwiYnJhbmQiLCJ1bml0U2l6ZSIsInN0YXR1cyIsImJ1eWVyUHJpY2UiLCJwcmljZSIsInF0eSIsImRpc2NvdW50UGVyIiwiZGlzY291bnQiLCJ0b3RhbCIsIm5ldFByaWNlIiwicGhvdG8iLCJzb3J0RGVzYyIsIlRFWFQiLCJkZXNjIiwicGhvbmVOdW1iZXIiLCJzcXVhcmUiLCJGTE9BVCIsInByb3ZpbmNlIiwiZGlzdHJpY3QiLCJ3YXJkIiwicHJvdmluY2VUZXh0IiwiZGlzdHJpY3RUZXh0Iiwid2FyZFRleHQiLCJidWRnZXQiLCJ0eXBlUm9vbSIsImludGVyaW9yIiwiZW5kb3ciLCJyYXRpbmciLCJwcm9kdWN0X2lkIiwibm90ZSIsInR5cGUiLCJhbGxvd051bGwiLCJ1c2VyX21hbmFnZXIiLCJyZW50IiwiQk9PTEVBTiIsImF1dGhvcl9waG9uZSIsImFkZHJlc3MiLCJhc3NvY2lhdGUiLCJtb2RlbHMiLCJiZWxvbmdzVG8iLCJTdWJDYXRlZ29yeSIsImZvcmVpZ25LZXkiLCJoYXNNYW55IiwicHJvZHVjdHBob3RvIiwiU3ViQ2hpbGRDYXRlZ29yeSIsInZlbmRvcl9wcm9kdWN0IiwidXNlciJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2RlbHMvcHJvZHVjdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcbm1vZHVsZS5leHBvcnRzID0gKHNlcXVlbGl6ZSwgRGF0YVR5cGVzKSA9PiB7XHJcbiAgY29uc3QgcHJvZHVjdCA9IHNlcXVlbGl6ZS5kZWZpbmUoJ3Byb2R1Y3QnLCB7XHJcbiAgICBjYXRlZ29yeUlkOiBEYXRhVHlwZXMuSU5URUdFUixcclxuICAgIHN1YkNhdGVnb3J5SWQ6IERhdGFUeXBlcy5JTlRFR0VSLFxyXG4gICAgY2hpbGRDYXRlZ29yeUlkOiBEYXRhVHlwZXMuSU5URUdFUixcclxuICAgIG5hbWU6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICBzbHVnOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgYnJhbmQ6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICB1bml0U2l6ZTogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIHN0YXR1czogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIGJ1eWVyUHJpY2U6IERhdGFUeXBlcy5JTlRFR0VSLFxyXG4gICAgcHJpY2U6IERhdGFUeXBlcy5JTlRFR0VSLFxyXG4gICAgcXR5OiBEYXRhVHlwZXMuSU5URUdFUixcclxuICAgIGRpc2NvdW50UGVyOiBEYXRhVHlwZXMuSU5URUdFUixcclxuICAgIGRpc2NvdW50OiBEYXRhVHlwZXMuSU5URUdFUixcclxuICAgIHRvdGFsOiBEYXRhVHlwZXMuSU5URUdFUixcclxuICAgIG5ldFByaWNlOiBEYXRhVHlwZXMuSU5URUdFUixcclxuICAgIHBob3RvOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgc29ydERlc2M6IERhdGFUeXBlcy5URVhULFxyXG4gICAgZGVzYzogRGF0YVR5cGVzLlRFWFQsXHJcbiAgICBwaG9uZU51bWJlcjogRGF0YVR5cGVzLlRFWFQsXHJcbiAgICBzcXVhcmU6IERhdGFUeXBlcy5GTE9BVCxcclxuICAgIHByb3ZpbmNlOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgZGlzdHJpY3Q6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICB3YXJkOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgcHJvdmluY2VUZXh0OiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgZGlzdHJpY3RUZXh0OiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgd2FyZFRleHQ6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICBidWRnZXQ6IERhdGFUeXBlcy5GTE9BVCxcclxuICAgIHR5cGVSb29tOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgaW50ZXJpb3I6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICBlbmRvdzogRGF0YVR5cGVzLklOVEVHRVIsXHJcbiAgICByYXRpbmc6IERhdGFUeXBlcy5JTlRFR0VSLFxyXG4gICAgcHJvZHVjdF9pZDogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIG5vdGU6IHtcclxuICAgICAgdHlwZTogRGF0YVR5cGVzLlRFWFQsXHJcbiAgICAgIGFsbG93TnVsbDogdHJ1ZVxyXG4gICAgfSxcclxuICAgIHVzZXJfbWFuYWdlcjoge1xyXG4gICAgICB0eXBlOiBEYXRhVHlwZXMuSU5URUdFUixcclxuICAgIH0sXHJcbiAgICByZW50OiB7XHJcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5CT09MRUFOLFxyXG4gICAgfSxcclxuICAgIGF1dGhvcl9waG9uZToge1xyXG4gICAgICB0eXBlOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgICBhbGxvd051bGw6IHRydWVcclxuICAgIH0sXHJcbiAgICBhZGRyZXNzOiB7XHJcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5URVhULFxyXG4gICAgICBhbGxvd051bGw6IHRydWVcclxuICAgIH1cclxuICB9LCB7fSk7XHJcblxyXG4gIHByb2R1Y3QuYXNzb2NpYXRlID0gZnVuY3Rpb24gKG1vZGVscykge1xyXG4gICAgLy8gYXNzb2NpYXRpb25zIGNhbiBiZSBkZWZpbmVkIGhlcmVcclxuICAgIG1vZGVscy5wcm9kdWN0LmJlbG9uZ3NUbyhtb2RlbHMuU3ViQ2F0ZWdvcnksIHsgZm9yZWlnbktleTogJ3N1YkNhdGVnb3J5SWQnIH0pO1xyXG4gICAgbW9kZWxzLnByb2R1Y3QuaGFzTWFueShtb2RlbHMucHJvZHVjdHBob3RvLCB7IGZvcmVpZ25LZXk6ICdwcm9kdWN0SWQnIH0pO1xyXG4gICAgbW9kZWxzLnByb2R1Y3QuYmVsb25nc1RvKG1vZGVscy5TdWJDaGlsZENhdGVnb3J5LCB7IGZvcmVpZ25LZXk6ICdjaGlsZENhdGVnb3J5SWQnIH0pO1xyXG4gICAgbW9kZWxzLnByb2R1Y3QuaGFzTWFueShtb2RlbHMudmVuZG9yX3Byb2R1Y3QsIHsgZm9yZWlnbktleTogJ3Byb2R1Y3RJZCcgfSk7XHJcbiAgICBtb2RlbHMucHJvZHVjdC5iZWxvbmdzVG8obW9kZWxzLnVzZXIsIHsgZm9yZWlnbktleTogJ3VzZXJfbWFuYWdlcicgfSk7XHJcbiAgfTtcclxuICByZXR1cm4gcHJvZHVjdDtcclxufTsiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBQ1pBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFVBQUNDLFNBQVMsRUFBRUMsU0FBUyxFQUFLO0VBQ3pDLElBQU1DLE9BQU8sR0FBR0YsU0FBUyxDQUFDRyxNQUFNLENBQUMsU0FBUyxFQUFFO0lBQzFDQyxVQUFVLEVBQUVILFNBQVMsQ0FBQ0ksT0FBTztJQUM3QkMsYUFBYSxFQUFFTCxTQUFTLENBQUNJLE9BQU87SUFDaENFLGVBQWUsRUFBRU4sU0FBUyxDQUFDSSxPQUFPO0lBQ2xDRyxJQUFJLEVBQUVQLFNBQVMsQ0FBQ1EsTUFBTTtJQUN0QkMsSUFBSSxFQUFFVCxTQUFTLENBQUNRLE1BQU07SUFDdEJFLEtBQUssRUFBRVYsU0FBUyxDQUFDUSxNQUFNO0lBQ3ZCRyxRQUFRLEVBQUVYLFNBQVMsQ0FBQ1EsTUFBTTtJQUMxQkksTUFBTSxFQUFFWixTQUFTLENBQUNRLE1BQU07SUFDeEJLLFVBQVUsRUFBRWIsU0FBUyxDQUFDSSxPQUFPO0lBQzdCVSxLQUFLLEVBQUVkLFNBQVMsQ0FBQ0ksT0FBTztJQUN4QlcsR0FBRyxFQUFFZixTQUFTLENBQUNJLE9BQU87SUFDdEJZLFdBQVcsRUFBRWhCLFNBQVMsQ0FBQ0ksT0FBTztJQUM5QmEsUUFBUSxFQUFFakIsU0FBUyxDQUFDSSxPQUFPO0lBQzNCYyxLQUFLLEVBQUVsQixTQUFTLENBQUNJLE9BQU87SUFDeEJlLFFBQVEsRUFBRW5CLFNBQVMsQ0FBQ0ksT0FBTztJQUMzQmdCLEtBQUssRUFBRXBCLFNBQVMsQ0FBQ1EsTUFBTTtJQUN2QmEsUUFBUSxFQUFFckIsU0FBUyxDQUFDc0IsSUFBSTtJQUN4QkMsSUFBSSxFQUFFdkIsU0FBUyxDQUFDc0IsSUFBSTtJQUNwQkUsV0FBVyxFQUFFeEIsU0FBUyxDQUFDc0IsSUFBSTtJQUMzQkcsTUFBTSxFQUFFekIsU0FBUyxDQUFDMEIsS0FBSztJQUN2QkMsUUFBUSxFQUFFM0IsU0FBUyxDQUFDUSxNQUFNO0lBQzFCb0IsUUFBUSxFQUFFNUIsU0FBUyxDQUFDUSxNQUFNO0lBQzFCcUIsSUFBSSxFQUFFN0IsU0FBUyxDQUFDUSxNQUFNO0lBQ3RCc0IsWUFBWSxFQUFFOUIsU0FBUyxDQUFDUSxNQUFNO0lBQzlCdUIsWUFBWSxFQUFFL0IsU0FBUyxDQUFDUSxNQUFNO0lBQzlCd0IsUUFBUSxFQUFFaEMsU0FBUyxDQUFDUSxNQUFNO0lBQzFCeUIsTUFBTSxFQUFFakMsU0FBUyxDQUFDMEIsS0FBSztJQUN2QlEsUUFBUSxFQUFFbEMsU0FBUyxDQUFDUSxNQUFNO0lBQzFCMkIsUUFBUSxFQUFFbkMsU0FBUyxDQUFDUSxNQUFNO0lBQzFCNEIsS0FBSyxFQUFFcEMsU0FBUyxDQUFDSSxPQUFPO0lBQ3hCaUMsTUFBTSxFQUFFckMsU0FBUyxDQUFDSSxPQUFPO0lBQ3pCa0MsVUFBVSxFQUFFdEMsU0FBUyxDQUFDUSxNQUFNO0lBQzVCK0IsSUFBSSxFQUFFO01BQ0pDLElBQUksRUFBRXhDLFNBQVMsQ0FBQ3NCLElBQUk7TUFDcEJtQixTQUFTLEVBQUU7SUFDYixDQUFDO0lBQ0RDLFlBQVksRUFBRTtNQUNaRixJQUFJLEVBQUV4QyxTQUFTLENBQUNJO0lBQ2xCLENBQUM7SUFDRHVDLElBQUksRUFBRTtNQUNKSCxJQUFJLEVBQUV4QyxTQUFTLENBQUM0QztJQUNsQixDQUFDO0lBQ0RDLFlBQVksRUFBRTtNQUNaTCxJQUFJLEVBQUV4QyxTQUFTLENBQUNRLE1BQU07TUFDdEJpQyxTQUFTLEVBQUU7SUFDYixDQUFDO0lBQ0RLLE9BQU8sRUFBRTtNQUNQTixJQUFJLEVBQUV4QyxTQUFTLENBQUNzQixJQUFJO01BQ3BCbUIsU0FBUyxFQUFFO0lBQ2I7RUFDRixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFFTnhDLE9BQU8sQ0FBQzhDLFNBQVMsR0FBRyxVQUFVQyxNQUFNLEVBQUU7SUFDcEM7SUFDQUEsTUFBTSxDQUFDL0MsT0FBTyxDQUFDZ0QsU0FBUyxDQUFDRCxNQUFNLENBQUNFLFdBQVcsRUFBRTtNQUFFQyxVQUFVLEVBQUU7SUFBZ0IsQ0FBQyxDQUFDO0lBQzdFSCxNQUFNLENBQUMvQyxPQUFPLENBQUNtRCxPQUFPLENBQUNKLE1BQU0sQ0FBQ0ssWUFBWSxFQUFFO01BQUVGLFVBQVUsRUFBRTtJQUFZLENBQUMsQ0FBQztJQUN4RUgsTUFBTSxDQUFDL0MsT0FBTyxDQUFDZ0QsU0FBUyxDQUFDRCxNQUFNLENBQUNNLGdCQUFnQixFQUFFO01BQUVILFVBQVUsRUFBRTtJQUFrQixDQUFDLENBQUM7SUFDcEZILE1BQU0sQ0FBQy9DLE9BQU8sQ0FBQ21ELE9BQU8sQ0FBQ0osTUFBTSxDQUFDTyxjQUFjLEVBQUU7TUFBRUosVUFBVSxFQUFFO0lBQVksQ0FBQyxDQUFDO0lBQzFFSCxNQUFNLENBQUMvQyxPQUFPLENBQUNnRCxTQUFTLENBQUNELE1BQU0sQ0FBQ1EsSUFBSSxFQUFFO01BQUVMLFVBQVUsRUFBRTtJQUFlLENBQUMsQ0FBQztFQUN2RSxDQUFDO0VBQ0QsT0FBT2xELE9BQU87QUFDaEIsQ0FBQyJ9