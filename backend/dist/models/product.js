'use strict';

module.exports = function (sequelize, DataTypes) {
  var product = sequelize.define('product', {
    categoryId: DataTypes.INTEGER,
    subCategoryId: DataTypes.INTEGER,
    childCategoryId: DataTypes.INTEGER,
    name: DataTypes.STRING,
    slug: DataTypes.STRING,
    brand: DataTypes.STRING,
    unitSize: DataTypes.STRING,
    status: DataTypes.STRING,
    buyerPrice: DataTypes.INTEGER,
    price: DataTypes.INTEGER,
    qty: DataTypes.INTEGER,
    discountPer: DataTypes.INTEGER,
    discount: DataTypes.INTEGER,
    total: DataTypes.INTEGER,
    netPrice: DataTypes.INTEGER,
    photo: DataTypes.STRING,
    sortDesc: DataTypes.TEXT,
    desc: DataTypes.TEXT,
    phoneNumber: DataTypes.TEXT,
    square: DataTypes.FLOAT,
    province: DataTypes.STRING,
    district: DataTypes.STRING,
    ward: DataTypes.STRING,
    provinceText: DataTypes.STRING,
    districtText: DataTypes.STRING,
    wardText: DataTypes.STRING,
    budget: DataTypes.FLOAT,
    typeRoom: DataTypes.STRING,
    interior: DataTypes.STRING,
    endow: DataTypes.INTEGER,
    rating: DataTypes.INTEGER,
    note: {
      type: DataTypes.TEXT,
      allowNull: true
    },
    user_manager: {
      type: DataTypes.INTEGER
    },
    rent: {
      type: DataTypes.BOOLEAN
    },
    author_phone: {
      type: DataTypes.STRING,
      allowNull: true
    }
  }, {});
  product.associate = function (models) {
    // associations can be defined here
    models.product.belongsTo(models.SubCategory, {
      foreignKey: 'subCategoryId'
    });
    models.product.hasMany(models.productphoto, {
      foreignKey: 'productId'
    });
    models.product.belongsTo(models.SubChildCategory, {
      foreignKey: 'childCategoryId'
    });
    models.product.hasMany(models.vendor_product, {
      foreignKey: 'productId'
    });
    models.product.belongsTo(models.user, {
      foreignKey: 'user_manager'
    });
  };
  return product;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwic2VxdWVsaXplIiwiRGF0YVR5cGVzIiwicHJvZHVjdCIsImRlZmluZSIsImNhdGVnb3J5SWQiLCJJTlRFR0VSIiwic3ViQ2F0ZWdvcnlJZCIsImNoaWxkQ2F0ZWdvcnlJZCIsIm5hbWUiLCJTVFJJTkciLCJzbHVnIiwiYnJhbmQiLCJ1bml0U2l6ZSIsInN0YXR1cyIsImJ1eWVyUHJpY2UiLCJwcmljZSIsInF0eSIsImRpc2NvdW50UGVyIiwiZGlzY291bnQiLCJ0b3RhbCIsIm5ldFByaWNlIiwicGhvdG8iLCJzb3J0RGVzYyIsIlRFWFQiLCJkZXNjIiwicGhvbmVOdW1iZXIiLCJzcXVhcmUiLCJGTE9BVCIsInByb3ZpbmNlIiwiZGlzdHJpY3QiLCJ3YXJkIiwicHJvdmluY2VUZXh0IiwiZGlzdHJpY3RUZXh0Iiwid2FyZFRleHQiLCJidWRnZXQiLCJ0eXBlUm9vbSIsImludGVyaW9yIiwiZW5kb3ciLCJyYXRpbmciLCJub3RlIiwidHlwZSIsImFsbG93TnVsbCIsInVzZXJfbWFuYWdlciIsInJlbnQiLCJCT09MRUFOIiwiYXV0aG9yX3Bob25lIiwiYXNzb2NpYXRlIiwibW9kZWxzIiwiYmVsb25nc1RvIiwiU3ViQ2F0ZWdvcnkiLCJmb3JlaWduS2V5IiwiaGFzTWFueSIsInByb2R1Y3RwaG90byIsIlN1YkNoaWxkQ2F0ZWdvcnkiLCJ2ZW5kb3JfcHJvZHVjdCIsInVzZXIiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9kZWxzL3Byb2R1Y3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSAoc2VxdWVsaXplLCBEYXRhVHlwZXMpID0+IHtcbiAgY29uc3QgcHJvZHVjdCA9IHNlcXVlbGl6ZS5kZWZpbmUoJ3Byb2R1Y3QnLCB7XG4gICAgY2F0ZWdvcnlJZDogRGF0YVR5cGVzLklOVEVHRVIsXG4gICAgc3ViQ2F0ZWdvcnlJZDogRGF0YVR5cGVzLklOVEVHRVIsXG4gICAgY2hpbGRDYXRlZ29yeUlkOiBEYXRhVHlwZXMuSU5URUdFUixcbiAgICBuYW1lOiBEYXRhVHlwZXMuU1RSSU5HLFxuICAgIHNsdWc6IERhdGFUeXBlcy5TVFJJTkcsXG4gICAgYnJhbmQ6IERhdGFUeXBlcy5TVFJJTkcsXG4gICAgdW5pdFNpemU6IERhdGFUeXBlcy5TVFJJTkcsXG4gICAgc3RhdHVzOiBEYXRhVHlwZXMuU1RSSU5HLFxuICAgIGJ1eWVyUHJpY2U6IERhdGFUeXBlcy5JTlRFR0VSLFxuICAgIHByaWNlOiBEYXRhVHlwZXMuSU5URUdFUixcbiAgICBxdHk6IERhdGFUeXBlcy5JTlRFR0VSLFxuICAgIGRpc2NvdW50UGVyOiBEYXRhVHlwZXMuSU5URUdFUixcbiAgICBkaXNjb3VudDogRGF0YVR5cGVzLklOVEVHRVIsXG4gICAgdG90YWw6IERhdGFUeXBlcy5JTlRFR0VSLFxuICAgIG5ldFByaWNlOiBEYXRhVHlwZXMuSU5URUdFUixcbiAgICBwaG90bzogRGF0YVR5cGVzLlNUUklORyxcbiAgICBzb3J0RGVzYzogRGF0YVR5cGVzLlRFWFQsXG4gICAgZGVzYzogRGF0YVR5cGVzLlRFWFQsXG4gICAgcGhvbmVOdW1iZXI6IERhdGFUeXBlcy5URVhULFxuICAgIHNxdWFyZTogRGF0YVR5cGVzLkZMT0FULFxuICAgIHByb3ZpbmNlOiBEYXRhVHlwZXMuU1RSSU5HLFxuICAgIGRpc3RyaWN0OiBEYXRhVHlwZXMuU1RSSU5HLFxuICAgIHdhcmQ6IERhdGFUeXBlcy5TVFJJTkcsXG4gICAgcHJvdmluY2VUZXh0OiBEYXRhVHlwZXMuU1RSSU5HLFxuICAgIGRpc3RyaWN0VGV4dDogRGF0YVR5cGVzLlNUUklORyxcbiAgICB3YXJkVGV4dDogRGF0YVR5cGVzLlNUUklORyxcbiAgICBidWRnZXQ6IERhdGFUeXBlcy5GTE9BVCxcbiAgICB0eXBlUm9vbTogRGF0YVR5cGVzLlNUUklORyxcbiAgICBpbnRlcmlvcjogRGF0YVR5cGVzLlNUUklORyxcbiAgICBlbmRvdzogRGF0YVR5cGVzLklOVEVHRVIsXG4gICAgcmF0aW5nOiBEYXRhVHlwZXMuSU5URUdFUixcbiAgICBub3RlOiB7XG4gICAgICB0eXBlOiBEYXRhVHlwZXMuVEVYVCxcbiAgICAgIGFsbG93TnVsbDogdHJ1ZVxuICAgIH0sXG4gICAgdXNlcl9tYW5hZ2VyOiB7XG4gICAgICB0eXBlOiBEYXRhVHlwZXMuSU5URUdFUixcbiAgICB9LFxuICAgIHJlbnQ6IHtcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5CT09MRUFOLFxuICAgIH0sXG4gICAgYXV0aG9yX3Bob25lOiB7XG4gICAgICB0eXBlOiBEYXRhVHlwZXMuU1RSSU5HLFxuICAgICAgYWxsb3dOdWxsOiB0cnVlXG4gICAgfVxuICB9LCB7fSk7XG5cbiAgcHJvZHVjdC5hc3NvY2lhdGUgPSBmdW5jdGlvbiAobW9kZWxzKSB7XG4gICAgLy8gYXNzb2NpYXRpb25zIGNhbiBiZSBkZWZpbmVkIGhlcmVcbiAgICBtb2RlbHMucHJvZHVjdC5iZWxvbmdzVG8obW9kZWxzLlN1YkNhdGVnb3J5LCB7IGZvcmVpZ25LZXk6ICdzdWJDYXRlZ29yeUlkJyB9KTtcbiAgICBtb2RlbHMucHJvZHVjdC5oYXNNYW55KG1vZGVscy5wcm9kdWN0cGhvdG8sIHsgZm9yZWlnbktleTogJ3Byb2R1Y3RJZCcgfSk7XG4gICAgbW9kZWxzLnByb2R1Y3QuYmVsb25nc1RvKG1vZGVscy5TdWJDaGlsZENhdGVnb3J5LCB7IGZvcmVpZ25LZXk6ICdjaGlsZENhdGVnb3J5SWQnIH0pO1xuICAgIG1vZGVscy5wcm9kdWN0Lmhhc01hbnkobW9kZWxzLnZlbmRvcl9wcm9kdWN0LCB7IGZvcmVpZ25LZXk6ICdwcm9kdWN0SWQnIH0pO1xuICAgIG1vZGVscy5wcm9kdWN0LmJlbG9uZ3NUbyhtb2RlbHMudXNlciwgeyBmb3JlaWduS2V5OiAndXNlcl9tYW5hZ2VyJyB9KTtcbiAgfTtcbiAgcmV0dXJuIHByb2R1Y3Q7XG59OyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFDWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUcsVUFBQ0MsU0FBUyxF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