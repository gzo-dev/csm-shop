'use strict';

module.exports = function (sequelize, DataTypes) {
  var product = sequelize.define('product', {
    categoryId: DataTypes.INTEGER,
    subCategoryId: DataTypes.INTEGER,
    childCategoryId: DataTypes.INTEGER,
    name: DataTypes.STRING,
    slug: DataTypes.STRING,
    brand: DataTypes.STRING,
    unitSize: DataTypes.STRING,
    status: DataTypes.STRING,
    buyerPrice: DataTypes.INTEGER,
    price: DataTypes.INTEGER,
    qty: DataTypes.INTEGER,
    discountPer: DataTypes.INTEGER,
    discount: DataTypes.INTEGER,
    total: DataTypes.INTEGER,
    netPrice: DataTypes.INTEGER,
    photo: DataTypes.STRING,
    sortDesc: DataTypes.TEXT,
    desc: DataTypes.TEXT,
    phoneNumber: DataTypes.TEXT,
    square: DataTypes.FLOAT,
    province: DataTypes.STRING,
    district: DataTypes.STRING,
    ward: DataTypes.STRING,
    provinceText: DataTypes.STRING,
    districtText: DataTypes.STRING,
    wardText: DataTypes.STRING,
    budget: DataTypes.FLOAT,
    typeRoom: DataTypes.STRING,
    interior: DataTypes.STRING,
    endow: DataTypes.INTEGER
  }, {});
  product.associate = function (models) {
    // associations can be defined here
    models.product.belongsTo(models.SubCategory, {
      foreignKey: 'subCategoryId'
    });
    models.product.hasMany(models.productphoto, {
      foreignKey: 'productId'
    });
    models.product.belongsTo(models.SubChildCategory, {
      foreignKey: 'childCategoryId'
    });
    models.product.hasMany(models.vendor_product, {
      foreignKey: 'productId'
    });
  };
  return product;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwic2VxdWVsaXplIiwiRGF0YVR5cGVzIiwicHJvZHVjdCIsImRlZmluZSIsImNhdGVnb3J5SWQiLCJJTlRFR0VSIiwic3ViQ2F0ZWdvcnlJZCIsImNoaWxkQ2F0ZWdvcnlJZCIsIm5hbWUiLCJTVFJJTkciLCJzbHVnIiwiYnJhbmQiLCJ1bml0U2l6ZSIsInN0YXR1cyIsImJ1eWVyUHJpY2UiLCJwcmljZSIsInF0eSIsImRpc2NvdW50UGVyIiwiZGlzY291bnQiLCJ0b3RhbCIsIm5ldFByaWNlIiwicGhvdG8iLCJzb3J0RGVzYyIsIlRFWFQiLCJkZXNjIiwicGhvbmVOdW1iZXIiLCJzcXVhcmUiLCJGTE9BVCIsInByb3ZpbmNlIiwiZGlzdHJpY3QiLCJ3YXJkIiwicHJvdmluY2VUZXh0IiwiZGlzdHJpY3RUZXh0Iiwid2FyZFRleHQiLCJidWRnZXQiLCJ0eXBlUm9vbSIsImludGVyaW9yIiwiZW5kb3ciLCJhc3NvY2lhdGUiLCJtb2RlbHMiLCJiZWxvbmdzVG8iLCJTdWJDYXRlZ29yeSIsImZvcmVpZ25LZXkiLCJoYXNNYW55IiwicHJvZHVjdHBob3RvIiwiU3ViQ2hpbGRDYXRlZ29yeSIsInZlbmRvcl9wcm9kdWN0Il0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vZGVscy9wcm9kdWN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gKHNlcXVlbGl6ZSwgRGF0YVR5cGVzKSA9PiB7XG4gIGNvbnN0IHByb2R1Y3QgPSBzZXF1ZWxpemUuZGVmaW5lKCdwcm9kdWN0Jywge1xuICAgIGNhdGVnb3J5SWQ6IERhdGFUeXBlcy5JTlRFR0VSLFxuICAgIHN1YkNhdGVnb3J5SWQ6IERhdGFUeXBlcy5JTlRFR0VSLFxuICAgIGNoaWxkQ2F0ZWdvcnlJZDogRGF0YVR5cGVzLklOVEVHRVIsXG4gICAgbmFtZTogRGF0YVR5cGVzLlNUUklORyxcbiAgICBzbHVnOiBEYXRhVHlwZXMuU1RSSU5HLFxuICAgIGJyYW5kOiBEYXRhVHlwZXMuU1RSSU5HLFxuICAgIHVuaXRTaXplOiBEYXRhVHlwZXMuU1RSSU5HLFxuICAgIHN0YXR1czogRGF0YVR5cGVzLlNUUklORyxcbiAgICBidXllclByaWNlOiBEYXRhVHlwZXMuSU5URUdFUixcbiAgICBwcmljZTogRGF0YVR5cGVzLklOVEVHRVIsXG4gICAgcXR5OiBEYXRhVHlwZXMuSU5URUdFUixcbiAgICBkaXNjb3VudFBlcjogRGF0YVR5cGVzLklOVEVHRVIsXG4gICAgZGlzY291bnQ6IERhdGFUeXBlcy5JTlRFR0VSLFxuICAgIHRvdGFsOiBEYXRhVHlwZXMuSU5URUdFUixcbiAgICBuZXRQcmljZTogRGF0YVR5cGVzLklOVEVHRVIsXG4gICAgcGhvdG86IERhdGFUeXBlcy5TVFJJTkcsXG4gICAgc29ydERlc2M6IERhdGFUeXBlcy5URVhULFxuICAgIGRlc2M6IERhdGFUeXBlcy5URVhULFxuICAgIHBob25lTnVtYmVyOiBEYXRhVHlwZXMuVEVYVCxcbiAgICBzcXVhcmU6IERhdGFUeXBlcy5GTE9BVCxcbiAgICBwcm92aW5jZTogRGF0YVR5cGVzLlNUUklORyxcbiAgICBkaXN0cmljdDogRGF0YVR5cGVzLlNUUklORywgXG4gICAgd2FyZDogRGF0YVR5cGVzLlNUUklORyxcbiAgICBwcm92aW5jZVRleHQ6IERhdGFUeXBlcy5TVFJJTkcsXG4gICAgZGlzdHJpY3RUZXh0OiBEYXRhVHlwZXMuU1RSSU5HLFxuICAgIHdhcmRUZXh0OiBEYXRhVHlwZXMuU1RSSU5HLFxuICAgIGJ1ZGdldDogRGF0YVR5cGVzLkZMT0FULFxuICAgIHR5cGVSb29tOiBEYXRhVHlwZXMuU1RSSU5HLFxuICAgIGludGVyaW9yOiBEYXRhVHlwZXMuU1RSSU5HLFxuICAgIGVuZG93OiBEYXRhVHlwZXMuSU5URUdFUlxuICAgIFxuICB9LCB7fSk7XG4gIHByb2R1Y3QuYXNzb2NpYXRlID0gZnVuY3Rpb24obW9kZWxzKSB7XG4gICAgLy8gYXNzb2NpYXRpb25zIGNhbiBiZSBkZWZpbmVkIGhlcmVcbiAgICBtb2RlbHMucHJvZHVjdC5iZWxvbmdzVG8obW9kZWxzLlN1YkNhdGVnb3J5LCB7IGZvcmVpZ25LZXk6ICdzdWJDYXRlZ29yeUlkJyB9KTtcbiAgICBtb2RlbHMucHJvZHVjdC5oYXNNYW55KG1vZGVscy5wcm9kdWN0cGhvdG8sIHsgZm9yZWlnbktleTogJ3Byb2R1Y3RJZCcgfSk7XG4gICAgbW9kZWxzLnByb2R1Y3QuYmVsb25nc1RvKG1vZGVscy5TdWJDaGlsZENhdGVnb3J5LCB7IGZvcmVpZ25LZXk6ICdjaGlsZENhdGVnb3J5SWQnIH0pO1xuICAgIG1vZGVscy5wcm9kdWN0Lmhhc01hbnkobW9kZWxzLnZlbmRvcl9wcm9kdWN0LCB7IGZvcmVpZ25LZXk6ICdwcm9kdWN0SWQnIH0pOyAgXG4gIH07XG4gIHJldHVybiBwcm9kdWN0O1xufTsiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBQ1pBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFVBQUNDLFNBQVMsRUFBRUMsU0FBUyxFQUFLO0VBQ3pDLElBQU1DLE9BQU8sR0FBR0YsU0FBUyxDQUFDRyxNQUFNLENBQUMsU0FBUyxFQUFFO0lBQzFDQyxVQUFVLEVBQUVILFNBQVMsQ0FBQ0ksT0FBTztJQUM3QkMsYUFBYSxFQUFFTCxTQUFTLENBQUNJLE9BQU87SUFDaENFLGVBQWUsRUFBRU4sU0FBUyxDQUFDSSxPQUFPO0lBQ2xDRyxJQUFJLEVBQUVQLFNBQVMsQ0FBQ1EsTUFBTTtJQUN0QkMsSUFBSSxFQUFFVCxTQUFTLENBQUNRLE1BQU07SUFDdEJFLEtBQUssRUFBRVYsU0FBUyxDQUFDUSxNQUFNO0lBQ3ZCRyxRQUFRLEVBQUVYLFNBQVMsQ0FBQ1EsTUFBTTtJQUMxQkksTUFBTSxFQUFFWixTQUFTLENBQUNRLE1BQU07SUFDeEJLLFVBQVUsRUFBRWIsU0FBUyxDQUFDSSxPQUFPO0lBQzdCVSxLQUFLLEVBQUVkLFNBQVMsQ0FBQ0ksT0FBTztJQUN4QlcsR0FBRyxFQUFFZixTQUFTLENBQUNJLE9BQU87SUFDdEJZLFdBQVcsRUFBRWhCLFNBQVMsQ0FBQ0ksT0FBTztJQUM5QmEsUUFBUSxFQUFFakIsU0FBUyxDQUFDSSxPQUFPO0lBQzNCYyxLQUFLLEVBQUVsQixTQUFTLENBQUNJLE9BQU87SUFDeEJlLFFBQVEsRUFBRW5CLFNBQVMsQ0FBQ0ksT0FBTztJQUMzQmdCLEtBQUssRUFBRXBCLFNBQVMsQ0FBQ1EsTUFBTTtJQUN2QmEsUUFBUSxFQUFFckIsU0FBUyxDQUFDc0IsSUFBSTtJQUN4QkMsSUFBSSxFQUFFdkIsU0FBUyxDQUFDc0IsSUFBSTtJQUNwQkUsV0FBVyxFQUFFeEIsU0FBUyxDQUFDc0IsSUFBSTtJQUMzQkcsTUFBTSxFQUFFekIsU0FBUyxDQUFDMEIsS0FBSztJQUN2QkMsUUFBUSxFQUFFM0IsU0FBUyxDQUFDUSxNQUFNO0lBQzFCb0IsUUFBUSxFQUFFNUIsU0FBUyxDQUFDUSxNQUFNO0lBQzFCcUIsSUFBSSxFQUFFN0IsU0FBUyxDQUFDUSxNQUFNO0lBQ3RCc0IsWUFBWSxFQUFFOUIsU0FBUyxDQUFDUSxNQUFNO0lBQzlCdUIsWUFBWSxFQUFFL0IsU0FBUyxDQUFDUSxNQUFNO0lBQzlCd0IsUUFBUSxFQUFFaEMsU0FBUyxDQUFDUSxNQUFNO0lBQzFCeUIsTUFBTSxFQUFFakMsU0FBUyxDQUFDMEIsS0FBSztJQUN2QlEsUUFBUSxFQUFFbEMsU0FBUyxDQUFDUSxNQUFNO0lBQzFCMkIsUUFBUSxFQUFFbkMsU0FBUyxDQUFDUSxNQUFNO0lBQzFCNEIsS0FBSyxFQUFFcEMsU0FBUyxDQUFDSTtFQUVuQixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDTkgsT0FBTyxDQUFDb0MsU0FBUyxHQUFHLFVBQVNDLE1BQU0sRUFBRTtJQUNuQztJQUNBQSxNQUFNLENBQUNyQyxPQUFPLENBQUNzQyxTQUFTLENBQUNELE1BQU0sQ0FBQ0UsV0FBVyxFQUFFO01BQUVDLFVBQVUsRUFBRTtJQUFnQixDQUFDLENBQUM7SUFDN0VILE1BQU0sQ0FBQ3JDLE9BQU8sQ0FBQ3lDLE9BQU8sQ0FBQ0osTUFBTSxDQUFDSyxZQUFZLEVBQUU7TUFBRUYsVUFBVSxFQUFFO0lBQVksQ0FBQyxDQUFDO0lBQ3hFSCxNQUFNLENBQUNyQyxPQUFPLENBQUNzQyxTQUFTLENBQUNELE1BQU0sQ0FBQ00sZ0JBQWdCLEVBQUU7TUFBRUgsVUFBVSxFQUFFO0lBQWtCLENBQUMsQ0FBQztJQUNwRkgsTUFBTSxDQUFDckMsT0FBTyxDQUFDeUMsT0FBTyxDQUFDSixNQUFNLENBQUNPLGNBQWMsRUFBRTtNQUFFSixVQUFVLEVBQUU7SUFBWSxDQUFDLENBQUM7RUFDNUUsQ0FBQztFQUNELE9BQU94QyxPQUFPO0FBQ2hCLENBQUMifQ==