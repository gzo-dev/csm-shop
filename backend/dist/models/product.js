'use strict';

module.exports = function (sequelize, DataTypes) {
  var product = sequelize.define('product', {
    categoryId: DataTypes.INTEGER,
    subCategoryId: DataTypes.INTEGER,
    childCategoryId: DataTypes.INTEGER,
    name: DataTypes.STRING,
    slug: DataTypes.STRING,
    brand: DataTypes.STRING,
    unitSize: DataTypes.STRING,
    status: DataTypes.STRING,
    buyerPrice: DataTypes.INTEGER,
    price: DataTypes.INTEGER,
    qty: DataTypes.INTEGER,
    discountPer: DataTypes.INTEGER,
    discount: DataTypes.INTEGER,
    total: DataTypes.INTEGER,
    netPrice: DataTypes.INTEGER,
    photo: DataTypes.STRING,
    sortDesc: DataTypes.TEXT,
    desc: DataTypes.TEXT,
    phoneNumber: DataTypes.TEXT,
    square: DataTypes.FLOAT,
    province: DataTypes.STRING,
    district: DataTypes.STRING,
    ward: DataTypes.STRING,
    provinceText: DataTypes.STRING,
    districtText: DataTypes.STRING,
    wardText: DataTypes.STRING,
    budget: DataTypes.FLOAT,
    typeRoom: DataTypes.STRING,
    interior: DataTypes.STRING,
    endow: DataTypes.INTEGER,
    rating: DataTypes.INTEGER,
    note: {
      type: DataTypes.TEXT,
      allowNull: true
    },
    user_manager: {
      type: DataTypes.STRING,
      allowNull: true
    },
    rent: {
      type: DataTypes.BOOLEAN
    },
    author_phone: {
      type: DataTypes.STRING,
      allowNull: true
    }
  }, {});
  product.associate = function (models) {
    // associations can be defined here
    models.product.belongsTo(models.SubCategory, {
      foreignKey: 'subCategoryId'
    });
    models.product.hasMany(models.productphoto, {
      foreignKey: 'productId'
    });
    models.product.belongsTo(models.SubChildCategory, {
      foreignKey: 'childCategoryId'
    });
    models.product.hasMany(models.vendor_product, {
      foreignKey: 'productId'
    });
  };
  return product;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwic2VxdWVsaXplIiwiRGF0YVR5cGVzIiwicHJvZHVjdCIsImRlZmluZSIsImNhdGVnb3J5SWQiLCJJTlRFR0VSIiwic3ViQ2F0ZWdvcnlJZCIsImNoaWxkQ2F0ZWdvcnlJZCIsIm5hbWUiLCJTVFJJTkciLCJzbHVnIiwiYnJhbmQiLCJ1bml0U2l6ZSIsInN0YXR1cyIsImJ1eWVyUHJpY2UiLCJwcmljZSIsInF0eSIsImRpc2NvdW50UGVyIiwiZGlzY291bnQiLCJ0b3RhbCIsIm5ldFByaWNlIiwicGhvdG8iLCJzb3J0RGVzYyIsIlRFWFQiLCJkZXNjIiwicGhvbmVOdW1iZXIiLCJzcXVhcmUiLCJGTE9BVCIsInByb3ZpbmNlIiwiZGlzdHJpY3QiLCJ3YXJkIiwicHJvdmluY2VUZXh0IiwiZGlzdHJpY3RUZXh0Iiwid2FyZFRleHQiLCJidWRnZXQiLCJ0eXBlUm9vbSIsImludGVyaW9yIiwiZW5kb3ciLCJyYXRpbmciLCJub3RlIiwidHlwZSIsImFsbG93TnVsbCIsInVzZXJfbWFuYWdlciIsInJlbnQiLCJCT09MRUFOIiwiYXV0aG9yX3Bob25lIiwiYXNzb2NpYXRlIiwibW9kZWxzIiwiYmVsb25nc1RvIiwiU3ViQ2F0ZWdvcnkiLCJmb3JlaWduS2V5IiwiaGFzTWFueSIsInByb2R1Y3RwaG90byIsIlN1YkNoaWxkQ2F0ZWdvcnkiLCJ2ZW5kb3JfcHJvZHVjdCJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2RlbHMvcHJvZHVjdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IChzZXF1ZWxpemUsIERhdGFUeXBlcykgPT4ge1xuICBjb25zdCBwcm9kdWN0ID0gc2VxdWVsaXplLmRlZmluZSgncHJvZHVjdCcsIHtcbiAgICBjYXRlZ29yeUlkOiBEYXRhVHlwZXMuSU5URUdFUixcbiAgICBzdWJDYXRlZ29yeUlkOiBEYXRhVHlwZXMuSU5URUdFUixcbiAgICBjaGlsZENhdGVnb3J5SWQ6IERhdGFUeXBlcy5JTlRFR0VSLFxuICAgIG5hbWU6IERhdGFUeXBlcy5TVFJJTkcsXG4gICAgc2x1ZzogRGF0YVR5cGVzLlNUUklORyxcbiAgICBicmFuZDogRGF0YVR5cGVzLlNUUklORyxcbiAgICB1bml0U2l6ZTogRGF0YVR5cGVzLlNUUklORyxcbiAgICBzdGF0dXM6IERhdGFUeXBlcy5TVFJJTkcsXG4gICAgYnV5ZXJQcmljZTogRGF0YVR5cGVzLklOVEVHRVIsXG4gICAgcHJpY2U6IERhdGFUeXBlcy5JTlRFR0VSLFxuICAgIHF0eTogRGF0YVR5cGVzLklOVEVHRVIsXG4gICAgZGlzY291bnRQZXI6IERhdGFUeXBlcy5JTlRFR0VSLFxuICAgIGRpc2NvdW50OiBEYXRhVHlwZXMuSU5URUdFUixcbiAgICB0b3RhbDogRGF0YVR5cGVzLklOVEVHRVIsXG4gICAgbmV0UHJpY2U6IERhdGFUeXBlcy5JTlRFR0VSLFxuICAgIHBob3RvOiBEYXRhVHlwZXMuU1RSSU5HLFxuICAgIHNvcnREZXNjOiBEYXRhVHlwZXMuVEVYVCxcbiAgICBkZXNjOiBEYXRhVHlwZXMuVEVYVCxcbiAgICBwaG9uZU51bWJlcjogRGF0YVR5cGVzLlRFWFQsXG4gICAgc3F1YXJlOiBEYXRhVHlwZXMuRkxPQVQsXG4gICAgcHJvdmluY2U6IERhdGFUeXBlcy5TVFJJTkcsXG4gICAgZGlzdHJpY3Q6IERhdGFUeXBlcy5TVFJJTkcsXG4gICAgd2FyZDogRGF0YVR5cGVzLlNUUklORyxcbiAgICBwcm92aW5jZVRleHQ6IERhdGFUeXBlcy5TVFJJTkcsXG4gICAgZGlzdHJpY3RUZXh0OiBEYXRhVHlwZXMuU1RSSU5HLFxuICAgIHdhcmRUZXh0OiBEYXRhVHlwZXMuU1RSSU5HLFxuICAgIGJ1ZGdldDogRGF0YVR5cGVzLkZMT0FULFxuICAgIHR5cGVSb29tOiBEYXRhVHlwZXMuU1RSSU5HLFxuICAgIGludGVyaW9yOiBEYXRhVHlwZXMuU1RSSU5HLFxuICAgIGVuZG93OiBEYXRhVHlwZXMuSU5URUdFUixcbiAgICByYXRpbmc6IERhdGFUeXBlcy5JTlRFR0VSLFxuICAgIG5vdGU6IHtcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5URVhULFxuICAgICAgYWxsb3dOdWxsOiB0cnVlXG4gICAgfSxcbiAgICB1c2VyX21hbmFnZXI6IHtcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5TVFJJTkcsXG4gICAgICBhbGxvd051bGw6IHRydWUgXG4gICAgfSxcbiAgICByZW50OiB7XG4gICAgICB0eXBlOiBEYXRhVHlwZXMuQk9PTEVBTixcbiAgICB9LFxuICAgIGF1dGhvcl9waG9uZToge1xuICAgICAgdHlwZTogRGF0YVR5cGVzLlNUUklORyxcbiAgICAgIGFsbG93TnVsbDogdHJ1ZVxuICAgIH1cbiAgfSwge30pO1xuXG4gIHByb2R1Y3QuYXNzb2NpYXRlID0gZnVuY3Rpb24gKG1vZGVscykge1xuICAgIC8vIGFzc29jaWF0aW9ucyBjYW4gYmUgZGVmaW5lZCBoZXJlXG4gICAgbW9kZWxzLnByb2R1Y3QuYmVsb25nc1RvKG1vZGVscy5TdWJDYXRlZ29yeSwgeyBmb3JlaWduS2V5OiAnc3ViQ2F0ZWdvcnlJZCcgfSk7XG4gICAgbW9kZWxzLnByb2R1Y3QuaGFzTWFueShtb2RlbHMucHJvZHVjdHBob3RvLCB7IGZvcmVpZ25LZXk6ICdwcm9kdWN0SWQnIH0pO1xuICAgIG1vZGVscy5wcm9kdWN0LmJlbG9uZ3NUbyhtb2RlbHMuU3ViQ2hpbGRDYXRlZ29yeSwgeyBmb3JlaWduS2V5OiAnY2hpbGRDYXRlZ29yeUlkJyB9KTtcbiAgICBtb2RlbHMucHJvZHVjdC5oYXNNYW55KG1vZGVscy52ZW5kb3JfcHJvZHVjdCwgeyBmb3JlaWduS2V5OiAncHJvZHVjdElkJyB9KTtcbiAgfTtcbiAgcmV0dXJuIHByb2R1Y3Q7XG59OyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFDWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUcsVUFBQ0MsU0FBUyxFQUFFQyxTQUFTLEVBQUs7RUFDekMsSUFBTUMsT0FBTyxHQUFHRixTQUFTLENBQUNHLE1BQU0sQ0FBQyxT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