'use strict';

module.exports = function (sequelize, DataTypes) {
  var product = sequelize.define('product', {
    categoryId: DataTypes.INTEGER,
    subCategoryId: DataTypes.INTEGER,
    childCategoryId: DataTypes.INTEGER,
    name: DataTypes.STRING,
    slug: DataTypes.STRING,
    brand: DataTypes.STRING,
    unitSize: DataTypes.STRING,
    status: DataTypes.STRING,
    buyerPrice: DataTypes.INTEGER,
    price: DataTypes.INTEGER,
    qty: DataTypes.INTEGER,
    discountPer: DataTypes.INTEGER,
    discount: DataTypes.INTEGER,
    total: DataTypes.INTEGER,
    netPrice: DataTypes.INTEGER,
    photo: DataTypes.STRING,
    sortDesc: DataTypes.TEXT,
    desc: DataTypes.TEXT,
    phoneNumber: DataTypes.TEXT,
    square: DataTypes.FLOAT,
    province: DataTypes.STRING,
    district: DataTypes.STRING,
    ward: DataTypes.STRING,
    provinceText: DataTypes.STRING,
    districtText: DataTypes.STRING,
    wardText: DataTypes.STRING,
    budget: DataTypes.FLOAT,
    typeRoom: DataTypes.STRING,
    interior: DataTypes.STRING,
    endow: DataTypes.INTEGER,
    rating: DataTypes.INTEGER
  }, {});
  product.associate = function (models) {
    // associations can be defined here
    models.product.belongsTo(models.SubCategory, {
      foreignKey: 'subCategoryId'
    });
    models.product.hasMany(models.productphoto, {
      foreignKey: 'productId'
    });
    models.product.belongsTo(models.SubChildCategory, {
      foreignKey: 'childCategoryId'
    });
    models.product.hasMany(models.vendor_product, {
      foreignKey: 'productId'
    });
  };
  return product;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwic2VxdWVsaXplIiwiRGF0YVR5cGVzIiwicHJvZHVjdCIsImRlZmluZSIsImNhdGVnb3J5SWQiLCJJTlRFR0VSIiwic3ViQ2F0ZWdvcnlJZCIsImNoaWxkQ2F0ZWdvcnlJZCIsIm5hbWUiLCJTVFJJTkciLCJzbHVnIiwiYnJhbmQiLCJ1bml0U2l6ZSIsInN0YXR1cyIsImJ1eWVyUHJpY2UiLCJwcmljZSIsInF0eSIsImRpc2NvdW50UGVyIiwiZGlzY291bnQiLCJ0b3RhbCIsIm5ldFByaWNlIiwicGhvdG8iLCJzb3J0RGVzYyIsIlRFWFQiLCJkZXNjIiwicGhvbmVOdW1iZXIiLCJzcXVhcmUiLCJGTE9BVCIsInByb3ZpbmNlIiwiZGlzdHJpY3QiLCJ3YXJkIiwicHJvdmluY2VUZXh0IiwiZGlzdHJpY3RUZXh0Iiwid2FyZFRleHQiLCJidWRnZXQiLCJ0eXBlUm9vbSIsImludGVyaW9yIiwiZW5kb3ciLCJyYXRpbmciLCJhc3NvY2lhdGUiLCJtb2RlbHMiLCJiZWxvbmdzVG8iLCJTdWJDYXRlZ29yeSIsImZvcmVpZ25LZXkiLCJoYXNNYW55IiwicHJvZHVjdHBob3RvIiwiU3ViQ2hpbGRDYXRlZ29yeSIsInZlbmRvcl9wcm9kdWN0Il0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vZGVscy9wcm9kdWN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gKHNlcXVlbGl6ZSwgRGF0YVR5cGVzKSA9PiB7XG4gIGNvbnN0IHByb2R1Y3QgPSBzZXF1ZWxpemUuZGVmaW5lKCdwcm9kdWN0Jywge1xuICAgIGNhdGVnb3J5SWQ6IERhdGFUeXBlcy5JTlRFR0VSLFxuICAgIHN1YkNhdGVnb3J5SWQ6IERhdGFUeXBlcy5JTlRFR0VSLFxuICAgIGNoaWxkQ2F0ZWdvcnlJZDogRGF0YVR5cGVzLklOVEVHRVIsXG4gICAgbmFtZTogRGF0YVR5cGVzLlNUUklORyxcbiAgICBzbHVnOiBEYXRhVHlwZXMuU1RSSU5HLFxuICAgIGJyYW5kOiBEYXRhVHlwZXMuU1RSSU5HLFxuICAgIHVuaXRTaXplOiBEYXRhVHlwZXMuU1RSSU5HLFxuICAgIHN0YXR1czogRGF0YVR5cGVzLlNUUklORyxcbiAgICBidXllclByaWNlOiBEYXRhVHlwZXMuSU5URUdFUixcbiAgICBwcmljZTogRGF0YVR5cGVzLklOVEVHRVIsXG4gICAgcXR5OiBEYXRhVHlwZXMuSU5URUdFUixcbiAgICBkaXNjb3VudFBlcjogRGF0YVR5cGVzLklOVEVHRVIsXG4gICAgZGlzY291bnQ6IERhdGFUeXBlcy5JTlRFR0VSLFxuICAgIHRvdGFsOiBEYXRhVHlwZXMuSU5URUdFUixcbiAgICBuZXRQcmljZTogRGF0YVR5cGVzLklOVEVHRVIsXG4gICAgcGhvdG86IERhdGFUeXBlcy5TVFJJTkcsXG4gICAgc29ydERlc2M6IERhdGFUeXBlcy5URVhULFxuICAgIGRlc2M6IERhdGFUeXBlcy5URVhULFxuICAgIHBob25lTnVtYmVyOiBEYXRhVHlwZXMuVEVYVCxcbiAgICBzcXVhcmU6IERhdGFUeXBlcy5GTE9BVCxcbiAgICBwcm92aW5jZTogRGF0YVR5cGVzLlNUUklORyxcbiAgICBkaXN0cmljdDogRGF0YVR5cGVzLlNUUklORywgXG4gICAgd2FyZDogRGF0YVR5cGVzLlNUUklORyxcbiAgICBwcm92aW5jZVRleHQ6IERhdGFUeXBlcy5TVFJJTkcsXG4gICAgZGlzdHJpY3RUZXh0OiBEYXRhVHlwZXMuU1RSSU5HLFxuICAgIHdhcmRUZXh0OiBEYXRhVHlwZXMuU1RSSU5HLFxuICAgIGJ1ZGdldDogRGF0YVR5cGVzLkZMT0FULFxuICAgIHR5cGVSb29tOiBEYXRhVHlwZXMuU1RSSU5HLFxuICAgIGludGVyaW9yOiBEYXRhVHlwZXMuU1RSSU5HLFxuICAgIGVuZG93OiBEYXRhVHlwZXMuSU5URUdFUixcbiAgICByYXRpbmc6IERhdGFUeXBlcy5JTlRFR0VSXG4gICAgXG4gIH0sIHt9KTtcbiAgcHJvZHVjdC5hc3NvY2lhdGUgPSBmdW5jdGlvbihtb2RlbHMpIHtcbiAgICAvLyBhc3NvY2lhdGlvbnMgY2FuIGJlIGRlZmluZWQgaGVyZVxuICAgIG1vZGVscy5wcm9kdWN0LmJlbG9uZ3NUbyhtb2RlbHMuU3ViQ2F0ZWdvcnksIHsgZm9yZWlnbktleTogJ3N1YkNhdGVnb3J5SWQnIH0pO1xuICAgIG1vZGVscy5wcm9kdWN0Lmhhc01hbnkobW9kZWxzLnByb2R1Y3RwaG90bywgeyBmb3JlaWduS2V5OiAncHJvZHVjdElkJyB9KTtcbiAgICBtb2RlbHMucHJvZHVjdC5iZWxvbmdzVG8obW9kZWxzLlN1YkNoaWxkQ2F0ZWdvcnksIHsgZm9yZWlnbktleTogJ2NoaWxkQ2F0ZWdvcnlJZCcgfSk7XG4gICAgbW9kZWxzLnByb2R1Y3QuaGFzTWFueShtb2RlbHMudmVuZG9yX3Byb2R1Y3QsIHsgZm9yZWlnbktleTogJ3Byb2R1Y3RJZCcgfSk7ICBcbiAgfTtcbiAgcmV0dXJuIHByb2R1Y3Q7XG59OyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFDWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUcsVUFBQ0MsU0FBUyxFQUFFQyxTQUFTLEVBQUs7RUFDekMsSUFBTUMsT0FBTyxHQUFHRixTQUFTLENBQUNHLE1BQU0sQ0FBQyxTQUFTLEVBQUU7SUFDMUNDLFVBQVUsRUFBRUgsU0FBUyxDQUFDSSxPQUFPO0lBQzdCQyxhQUFhLEVBQUVMLFNBQVMsQ0FBQ0ksT0FBTztJQUNoQ0UsZUFBZSxFQUFFTixTQUFTLENBQUNJLE9BQU87SUFDbENHLElBQUksRUFBRVAsU0FBUyxDQUFDUSxNQUFNO0lBQ3RCQyxJQUFJLEVBQUVULFNBQVMsQ0FBQ1EsTUFBTTtJQUN0QkUsS0FBSyxFQUFFVixTQUFTLENBQUNRLE1BQU07SUFDdkJHLFFBQVEsRUFBRVgsU0FBUyxDQUFDUSxNQUFNO0lBQzFCSSxNQUFNLEVBQUVaLFNBQVMsQ0FBQ1EsTUFBTTtJQUN4QkssVUFBVSxFQUFFYixTQUFTLENBQUNJLE9BQU87SUFDN0JVLEtBQUssRUFBRWQsU0FBUyxDQUFDSSxPQUFPO0lBQ3hCVyxHQUFHLEVBQUVmLFNBQVMsQ0FBQ0ksT0FBTztJQUN0QlksV0FBVyxFQUFFaEIsU0FBUyxDQUFDSSxPQUFPO0lBQzlCYSxRQUFRLEVBQUVqQixTQUFTLENBQUNJLE9BQU87SUFDM0JjLEtBQUssRUFBRWxCLFNBQVMsQ0FBQ0ksT0FBTztJQUN4QmUsUUFBUSxFQUFFbkIsU0FBUyxDQUFDSSxPQUFPO0lBQzNCZ0IsS0FBSyxFQUFFcEIsU0FBUyxDQUFDUSxNQUFNO0lBQ3ZCYSxRQUFRLEVBQUVyQixTQUFTLENBQUNzQixJQUFJO0lBQ3hCQyxJQUFJLEVBQUV2QixTQUFTLENBQUNzQixJQUFJO0lBQ3BCRSxXQUFXLEVBQUV4QixTQUFTLENBQUNzQixJQUFJO0lBQzNCRyxNQUFNLEVBQUV6QixTQUFTLENBQUMwQixLQUFLO0lBQ3ZCQyxRQUFRLEVBQUUzQixTQUFTLENBQUNRLE1BQU07SUFDMUJvQixRQUFRLEVBQUU1QixTQUFTLENBQUNRLE1BQU07SUFDMUJxQixJQUFJLEVBQUU3QixTQUFTLENBQUNRLE1BQU07SUFDdEJzQixZQUFZLEVBQUU5QixTQUFTLENBQUNRLE1BQU07SUFDOUJ1QixZQUFZLEVBQUUvQixTQUFTLENBQUNRLE1BQU07SUFDOUJ3QixRQUFRLEVBQUVoQyxTQUFTLENBQUNRLE1BQU07SUFDMUJ5QixNQUFNLEVBQUVqQyxTQUFTLENBQUMwQixLQUFLO0lBQ3ZCUSxRQUFRLEVBQUVsQyxTQUFTLENBQUNRLE1BQU07SUFDMUIyQixRQUFRLEVBQUVuQyxTQUFTLENBQUNRLE1BQU07SUFDMUI0QixLQUFLLEVBQUVwQyxTQUFTLENBQUNJLE9BQU87SUFDeEJpQyxNQUFNLEVBQUVyQyxTQUFTLENBQUNJO0VBRXBCLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztFQUNOSCxPQUFPLENBQUNxQyxTQUFTLEdBQUcsVUFBU0MsTUFBTSxFQUFFO0lBQ25DO0lBQ0FBLE1BQU0sQ0FBQ3RDLE9BQU8sQ0FBQ3VDLFNBQVMsQ0FBQ0QsTUFBTSxDQUFDRSxXQUFXLEVBQUU7TUFBRUMsVUFBVSxFQUFFO0lBQWdCLENBQUMsQ0FBQztJQUM3RUgsTUFBTSxDQUFDdEMsT0FBTyxDQUFDMEMsT0FBTyxDQUFDSixNQUFNLENBQUNLLFlBQVksRUFBRTtNQUFFRixVQUFVLEVBQUU7SUFBWSxDQUFDLENBQUM7SUFDeEVILE1BQU0sQ0FBQ3RDLE9BQU8sQ0FBQ3VDLFNBQVMsQ0FBQ0QsTUFBTSxDQUFDTSxnQkFBZ0IsRUFBRTtNQUFFSCxVQUFVLEVBQUU7SUFBa0IsQ0FBQyxDQUFDO0lBQ3BGSCxNQUFNLENBQUN0QyxPQUFPLENBQUMwQyxPQUFPLENBQUNKLE1BQU0sQ0FBQ08sY0FBYyxFQUFFO01BQUVKLFVBQVUsRUFBRTtJQUFZLENBQUMsQ0FBQztFQUM1RSxDQUFDO0VBQ0QsT0FBT3pDLE9BQU87QUFDaEIsQ0FBQyJ9