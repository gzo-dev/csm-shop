"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.db = void 0;
var _fs = require("fs");
var _path = require("path");
var _sequelize = _interopRequireDefault(require("sequelize"));
var _config = _interopRequireDefault(require("../config"));
var basename = (0, _path.basename)(__filename);
var db = {};
exports.db = db;
var sequelize = new _sequelize["default"](_config["default"].db.database, _config["default"].db.username, _config["default"].db.password, {
  host: _config["default"].db.host,
  // port: config.db.port,
  dialect: _config["default"].db.connection,
  logging: false,
  underscored: true,
  pool: {
    max: 20,
    min: 1,
    idle: 20000,
    acquire: 1000000
  },
  timestamps: true
});
(0, _fs.readdirSync)(__dirname).filter(function (file) {
  return file.indexOf('.') !== 0 && file !== basename && file.slice(-3) === '.js';
}).forEach(function (file) {
  var model = sequelize['import']((0, _path.join)(__dirname, file));
  db[model.name] = model;
});
Object.keys(db).forEach(function (modelName) {
  if (db[modelName].associate) {
    db[modelName].associate(db);
  }
});
db.sequelize = sequelize;
db.Sequelize = _sequelize["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZnMiLCJyZXF1aXJlIiwiX3BhdGgiLCJfc2VxdWVsaXplIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9jb25maWciLCJiYXNlbmFtZSIsIl9iYXNlbmFtZSIsIl9fZmlsZW5hbWUiLCJkYiIsImV4cG9ydHMiLCJzZXF1ZWxpemUiLCJTZXF1ZWxpemUiLCJjb25maWciLCJkYXRhYmFzZSIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJob3N0IiwiZGlhbGVjdCIsImNvbm5lY3Rpb24iLCJsb2dnaW5nIiwidW5kZXJzY29yZWQiLCJwb29sIiwibWF4IiwibWluIiwiaWRsZSIsImFjcXVpcmUiLCJ0aW1lc3RhbXBzIiwicmVhZGRpclN5bmMiLCJfX2Rpcm5hbWUiLCJmaWx0ZXIiLCJmaWxlIiwiaW5kZXhPZiIsInNsaWNlIiwiZm9yRWFjaCIsIm1vZGVsIiwiam9pbiIsIm5hbWUiLCJPYmplY3QiLCJrZXlzIiwibW9kZWxOYW1lIiwiYXNzb2NpYXRlIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vZGVscy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZWFkZGlyU3luYyB9IGZyb20gJ2ZzJztcbmltcG9ydCB7IGJhc2VuYW1lIGFzIF9iYXNlbmFtZSwgam9pbiB9IGZyb20gJ3BhdGgnO1xuaW1wb3J0IFNlcXVlbGl6ZSBmcm9tICdzZXF1ZWxpemUnO1xuaW1wb3J0IGNvbmZpZyBmcm9tICcuLi9jb25maWcnO1xuY29uc3QgYmFzZW5hbWUgPSBfYmFzZW5hbWUoX19maWxlbmFtZSk7XG5jb25zdCBkYiA9IHt9O1xuXG5sZXQgc2VxdWVsaXplID0gbmV3IFNlcXVlbGl6ZShjb25maWcuZGIuZGF0YWJhc2UsIGNvbmZpZy5kYi51c2VybmFtZSwgY29uZmlnLmRiLnBhc3N3b3JkLCB7XG4gICAgaG9zdDogY29uZmlnLmRiLmhvc3QsXG4gICAgLy8gcG9ydDogY29uZmlnLmRiLnBvcnQsXG4gICAgZGlhbGVjdDogY29uZmlnLmRiLmNvbm5lY3Rpb24sXG4gICAgbG9nZ2luZzogZmFsc2UsXG4gICAgdW5kZXJzY29yZWQ6IHRydWUsXG4gICAgcG9vbDoge1xuICAgICAgICBtYXg6IDIwLFxuICAgICAgICBtaW46IDEsXG4gICAgICAgIGlkbGU6IDIwMDAwLFxuICAgICAgICBhY3F1aXJlOiAxMDAwMDAwXG4gICAgfSxcbiAgICB0aW1lc3RhbXBzOnRydWVcbn0pO1xuXG5yZWFkZGlyU3luYyhfX2Rpcm5hbWUpXG4gICAgLmZpbHRlcihmaWxlID0+IHtcbiAgICAgICAgcmV0dXJuIChmaWxlLmluZGV4T2YoJy4nKSAhPT0gMCkgJiYgKGZpbGUgIT09IGJhc2VuYW1lKSAmJiAoZmlsZS5zbGljZSgtMykgPT09ICcuanMnKTtcbiAgICB9KVxuICAgIC5mb3JFYWNoKGZpbGUgPT4ge1xuICAgICAgICBjb25zdCBtb2RlbCA9IHNlcXVlbGl6ZVsnaW1wb3J0J10oam9pbihfX2Rpcm5hbWUsIGZpbGUpKTtcbiAgICAgICAgZGJbbW9kZWwubmFtZV0gPSBtb2RlbDtcbiAgICB9KTtcblxuT2JqZWN0LmtleXMoZGIpLmZvckVhY2gobW9kZWxOYW1lID0+IHtcbiAgICBpZiAoZGJbbW9kZWxOYW1lXS5hc3NvY2lhdGUpIHtcbiAgICAgICAgZGJbbW9kZWxOYW1lXS5hc3NvY2lhdGUoZGIpO1xuICAgIH1cbn0pO1xuXG5kYi5zZXF1ZWxpemUgPSBzZXF1ZWxpemU7XG5kYi5TZXF1ZWxpemUgPSBTZXF1ZWxpemU7XG5cbmV4cG9ydCB7IGRiIH07Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBQUEsR0FBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsS0FBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsVUFBQSxHQUFBQyxzQkFBQSxDQUFBSCxPQUFBO0FBQ0EsSUFBQUksT0FBQSxHQUFBRCxzQkFBQSxDQUFBSCxPQUFBO0FBQ0EsSUFBTUssUUFBUSxHQUFHLElBQUFDLGNBQVMsRUFBQ0MsVUFBVSxDQUFDO0FBQ3RDLElBQU1DLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFBQ0MsT0FBQSxDQUFBRCxFQUFBLEdBQUFBLEVBQUE7QUFFZCxJQUFJRSxTQUFTLEdBQUcsSUFBSUMscUJBQVMsQ0FBQ0Msa0JBQU0sQ0FBQ0osRUFBRSxDQUFDSyxRQUFRLEVBQUVELGtCQUFNLENBQUNKLEVBQUUsQ0FBQ00sUUFBUSxFQUFFRixrQkFBTSxDQUFDSixFQUFFLENBQUNPLFFBQVEsRUFBRTtFQUN0RkMsSUFBSSxFQUFFSixrQkFBTSxDQUFDSixFQUFFLENBQUNRLElBQUk7RUFDcEI7RUFDQUMsT0FBTyxFQUFFTCxrQkFBTSxDQUFDSixFQUFFLENBQUNVLFVBQVU7RUFDN0JDLE9BQU8sRUFBRSxLQUFLO0VBQ2RDLFdBQVcsRUFBRSxJQUFJO0VBQ2pCQyxJQUFJLEVBQUU7SUFDRkMsR0FBRyxFQUFFLEVBQUU7SUFDUEMsR0FBRyxFQUFFLENBQUM7SUFDTkMsSUFBSSxFQUFFLEtBQUs7SUFDWEMsT0FBTyxFQUFFO0VBQ2IsQ0FBQztFQUNEQyxVQUFVLEVBQUM7QUFDZixDQUFDLENBQUM7QUFFRixJQUFBQyxlQUFXLEVBQUNDLFNBQVMsQ0FBQyxDQUNqQkMsTUFBTSxDQUFDLFVBQUFDLElBQUksRUFBSTtFQUNaLE9BQVFBLElBQUksQ0FBQ0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBTUQsSUFBSSxLQUFLekIsUUFBUyxJQUFLeUIsSUFBSSxDQUFDRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxLQUFNO0FBQ3pGLENBQUMsQ0FBQyxDQUNEQyxPQUFPLENBQUMsVUFBQUgsSUFBSSxFQUFJO0VBQ2IsSUFBTUksS0FBSyxHQUFHeEIsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUF5QixVQUFJLEVBQUNQLFNBQVMsRUFBRUUsSUFBSSxDQUFDLENBQUM7RUFDeER0QixFQUFFLENBQUMwQixLQUFLLENBQUNFLElBQUksQ0FBQyxHQUFHRixLQUFLO0FBQzFCLENBQUMsQ0FBQztBQUVORyxNQUFNLENBQUNDLElBQUksQ0FBQzlCLEVBQUUsQ0FBQyxDQUFDeUIsT0FBTyxDQUFDLFVBQUFNLFNBQVMsRUFBSTtFQUNqQyxJQUFJL0IsRUFBRSxDQUFDK0IsU0FBUyxDQUFDLENBQUNDLFNBQVMsRUFBRTtJQUN6QmhDLEVBQUUsQ0FBQytCLFNBQVMsQ0FBQyxDQUFDQyxTQUFTLENBQUNoQyxFQUFFLENBQUM7RUFDL0I7QUFDSixDQUFDLENBQUM7QUFFRkEsRUFBRSxDQUFDRSxTQUFTLEdBQUdBLFNBQVM7QUFDeEJGLEVBQUUsQ0FBQ0csU0FBUyxHQUFHQSxxQkFBUyJ9