"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.authRouter = void 0;
var _express = _interopRequireDefault(require("express"));
var _auth = _interopRequireDefault(require("./auth.controller"));
var _verify_token = _interopRequireDefault(require("../../../middleware/verify_token"));
var _recaptcha = _interopRequireDefault(require("../../../middleware/recaptcha"));
// import { localStrategy , jwtStrategy} from '../../../middleware/strategy';
// import { sanitize } from '../../../middleware/sanitizer';
// import { validateBody, schemas } from '../../../middleware/validator';

var authRouter = _express["default"].Router();
exports.authRouter = authRouter;
authRouter.route('/register').post(_verify_token["default"], _auth["default"].addUser);
authRouter.route('/2fa').post(_verify_token["default"], _auth["default"].verify2fa);
authRouter.route('/verify/otp').post(_verify_token["default"], _auth["default"].verifyOtp);
authRouter.route('/user/getAllUserList').get(_verify_token["default"], _auth["default"].getAllUserList);
authRouter.route('/info').get(_verify_token["default"], _auth["default"].findUser);
authRouter.route('/user/leader').get(_auth["default"].getAllLeader);
authRouter.route('/user/update').post(_auth["default"].userUpdate);
authRouter.route('/user/delete').post(_auth["default"].deleteUserList);
authRouter.route('/rootLogin').post(_recaptcha["default"], _auth["default"].login);
authRouter.route('/verification').post(_auth["default"].verifyMail);
authRouter.route('/leader/list/employee').get(_verify_token["default"], _auth["default"].getListEmployeeOfLeader);
authRouter.route('/filter/leader/list/employee').get(_verify_token["default"], _auth["default"].getListEmployeeOfLeader);
authRouter.route('/leader/list/employee').put(_auth["default"].updateEmployeeOfLeader);
authRouter.route('/test-mail').put(_auth["default"].testMail);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXhwcmVzcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2F1dGgiLCJfdmVyaWZ5X3Rva2VuIiwiX3JlY2FwdGNoYSIsImF1dGhSb3V0ZXIiLCJleHByZXNzIiwiUm91dGVyIiwiZXhwb3J0cyIsInJvdXRlIiwicG9zdCIsImF1dGhlbnRpY2F0ZUpXVCIsImF1dGhDb250cm9sbGVyIiwiYWRkVXNlciIsInZlcmlmeTJmYSIsInZlcmlmeU90cCIsImdldCIsImdldEFsbFVzZXJMaXN0IiwiZmluZFVzZXIiLCJnZXRBbGxMZWFkZXIiLCJ1c2VyVXBkYXRlIiwiZGVsZXRlVXNlckxpc3QiLCJyZWNhcHRjaGFNaWRkbGV3YXJlIiwibG9naW4iLCJ2ZXJpZnlNYWlsIiwiZ2V0TGlzdEVtcGxveWVlT2ZMZWFkZXIiLCJwdXQiLCJ1cGRhdGVFbXBsb3llZU9mTGVhZGVyIiwidGVzdE1haWwiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpL3Jlc291cmNlcy9hdXRoL2F1dGgucm91dGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xyXG5pbXBvcnQgYXV0aENvbnRyb2xsZXIgZnJvbSAnLi9hdXRoLmNvbnRyb2xsZXInO1xyXG5pbXBvcnQgYXV0aGVudGljYXRlSldUIGZyb20gJy4uLy4uLy4uL21pZGRsZXdhcmUvdmVyaWZ5X3Rva2VuJztcclxuaW1wb3J0IHJlY2FwdGNoYU1pZGRsZXdhcmUgZnJvbSAnLi4vLi4vLi4vbWlkZGxld2FyZS9yZWNhcHRjaGEnO1xyXG4vLyBpbXBvcnQgeyBsb2NhbFN0cmF0ZWd5ICwgand0U3RyYXRlZ3l9IGZyb20gJy4uLy4uLy4uL21pZGRsZXdhcmUvc3RyYXRlZ3knO1xyXG4vLyBpbXBvcnQgeyBzYW5pdGl6ZSB9IGZyb20gJy4uLy4uLy4uL21pZGRsZXdhcmUvc2FuaXRpemVyJztcclxuLy8gaW1wb3J0IHsgdmFsaWRhdGVCb2R5LCBzY2hlbWFzIH0gZnJvbSAnLi4vLi4vLi4vbWlkZGxld2FyZS92YWxpZGF0b3InO1xyXG5cclxuZXhwb3J0IGNvbnN0IGF1dGhSb3V0ZXIgPSBleHByZXNzLlJvdXRlcigpO1xyXG5hdXRoUm91dGVyLnJvdXRlKCcvcmVnaXN0ZXInKS5wb3N0KGF1dGhlbnRpY2F0ZUpXVCwgYXV0aENvbnRyb2xsZXIuYWRkVXNlcik7XHJcbmF1dGhSb3V0ZXIucm91dGUoJy8yZmEnKS5wb3N0KGF1dGhlbnRpY2F0ZUpXVCwgYXV0aENvbnRyb2xsZXIudmVyaWZ5MmZhKTtcclxuYXV0aFJvdXRlci5yb3V0ZSgnL3ZlcmlmeS9vdHAnKS5wb3N0KGF1dGhlbnRpY2F0ZUpXVCwgYXV0aENvbnRyb2xsZXIudmVyaWZ5T3RwKTtcclxuYXV0aFJvdXRlci5yb3V0ZSgnL3VzZXIvZ2V0QWxsVXNlckxpc3QnKS5nZXQoYXV0aGVudGljYXRlSldULCBhdXRoQ29udHJvbGxlci5nZXRBbGxVc2VyTGlzdCk7XHJcbmF1dGhSb3V0ZXIucm91dGUoJy9pbmZvJykuZ2V0KGF1dGhlbnRpY2F0ZUpXVCwgYXV0aENvbnRyb2xsZXIuZmluZFVzZXIpO1xyXG5hdXRoUm91dGVyLnJvdXRlKCcvdXNlci9sZWFkZXInKS5nZXQoYXV0aENvbnRyb2xsZXIuZ2V0QWxsTGVhZGVyKTtcclxuYXV0aFJvdXRlci5yb3V0ZSgnL3VzZXIvdXBkYXRlJykucG9zdChhdXRoQ29udHJvbGxlci51c2VyVXBkYXRlKTtcclxuYXV0aFJvdXRlci5yb3V0ZSgnL3VzZXIvZGVsZXRlJykucG9zdChhdXRoQ29udHJvbGxlci5kZWxldGVVc2VyTGlzdCk7XHJcbmF1dGhSb3V0ZXIucm91dGUoJy9yb290TG9naW4nKS5wb3N0KHJlY2FwdGNoYU1pZGRsZXdhcmUsIGF1dGhDb250cm9sbGVyLmxvZ2luKTtcclxuYXV0aFJvdXRlci5yb3V0ZSgnL3ZlcmlmaWNhdGlvbicpLnBvc3QoYXV0aENvbnRyb2xsZXIudmVyaWZ5TWFpbClcclxuYXV0aFJvdXRlci5yb3V0ZSgnL2xlYWRlci9saXN0L2VtcGxveWVlJykuZ2V0KGF1dGhlbnRpY2F0ZUpXVCwgYXV0aENvbnRyb2xsZXIuZ2V0TGlzdEVtcGxveWVlT2ZMZWFkZXIpXHJcbmF1dGhSb3V0ZXIucm91dGUoJy9maWx0ZXIvbGVhZGVyL2xpc3QvZW1wbG95ZWUnKS5nZXQoYXV0aGVudGljYXRlSldULCBhdXRoQ29udHJvbGxlci5nZXRMaXN0RW1wbG95ZWVPZkxlYWRlcilcclxuYXV0aFJvdXRlci5yb3V0ZSgnL2xlYWRlci9saXN0L2VtcGxveWVlJykucHV0KGF1dGhDb250cm9sbGVyLnVwZGF0ZUVtcGxveWVlT2ZMZWFkZXIpXHJcbmF1dGhSb3V0ZXIucm91dGUoJy90ZXN0LW1haWwnKS5wdXQoYXV0aENvbnRyb2xsZXIudGVzdE1haWwpXHJcblxyXG5cclxuXHJcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQUFBLFFBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLEtBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLGFBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLFVBQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFTyxJQUFNSSxVQUFVLEdBQUdDLG1CQUFPLENBQUNDLE1BQU0sQ0FBQyxDQUFDO0FBQUNDLE9BQUEsQ0FBQUgsVUFBQSxHQUFBQSxVQUFBO0FBQzNDQSxVQUFVLENBQUNJLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQ0MsSUFBSSxDQUFDQyx3QkFBZSxFQUFFQyxnQkFBYyxDQUFDQyxPQUFPLENBQUM7QUFDM0VSLFVBQVUsQ0FBQ0ksS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDQyxJQUFJLENBQUNDLHdCQUFlLEVBQUVDLGdCQUFjLENBQUNFLFNBQVMsQ0FBQztBQUN4RVQsVUFBVSxDQUFDSSxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUNDLElBQUksQ0FBQ0Msd0JBQWUsRUFBRUMsZ0JBQWMsQ0FBQ0csU0FBUyxDQUFDO0FBQy9FVixVQUFVLENBQUNJLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDTyxHQUFHLENBQUNMLHdCQUFlLEVBQUVDLGdCQUFjLENBQUNLLGNBQWMsQ0FBQztBQUM1RlosVUFBVSxDQUFDSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUNPLEdBQUcsQ0FBQ0wsd0JBQWUsRUFBRUMsZ0JBQWMsQ0FBQ00sUUFBUSxDQUFDO0FBQ3ZFYixVQUFVLENBQUNJLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQ08sR0FBRyxDQUFDSixnQkFBYyxDQUFDTyxZQUFZLENBQUM7QUFDakVkLFVBQVUsQ0FBQ0ksS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDQyxJQUFJLENBQUNFLGdCQUFjLENBQUNRLFVBQVUsQ0FBQztBQUNoRWYsVUFBVSxDQUFDSSxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUNDLElBQUksQ0FBQ0UsZ0JBQWMsQ0FBQ1MsY0FBYyxDQUFDO0FBQ3BFaEIsVUFBVSxDQUFDSSxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUNDLElBQUksQ0FBQ1kscUJBQW1CLEVBQUVWLGdCQUFjLENBQUNXLEtBQUssQ0FBQztBQUM5RWxCLFVBQVUsQ0FBQ0ksS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDQyxJQUFJLENBQUNFLGdCQUFjLENBQUNZLFVBQVUsQ0FBQztBQUNqRW5CLFVBQVUsQ0FBQ0ksS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUNPLEdBQUcsQ0FBQ0wsd0JBQWUsRUFBRUMsZ0JBQWMsQ0FBQ2EsdUJBQXVCLENBQUM7QUFDdEdwQixVQUFVLENBQUNJLEtBQUssQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDTyxHQUFHLENBQUNMLHdCQUFlLEVBQUVDLGdCQUFjLENBQUNhLHVCQUF1QixDQUFDO0FBQzdHcEIsVUFBVSxDQUFDSSxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQ2lCLEdBQUcsQ0FBQ2QsZ0JBQWMsQ0FBQ2Usc0JBQXNCLENBQUM7QUFDcEZ0QixVQUFVLENBQUNJLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQ2lCLEdBQUcsQ0FBQ2QsZ0JBQWMsQ0FBQ2dCLFFBQVEsQ0FBQyJ9