"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _express = _interopRequireDefault(require("express"));
var _morgan = _interopRequireDefault(require("morgan"));
var _path = _interopRequireDefault(require("path"));
var _passport = _interopRequireDefault(require("passport"));
var _expressSession = _interopRequireDefault(require("express-session"));
var _bodyParser = _interopRequireDefault(require("body-parser"));
var _cookieParser = _interopRequireDefault(require("cookie-parser"));
var _expressSanitizer = _interopRequireDefault(require("express-sanitizer"));
var _helmet = _interopRequireDefault(require("helmet"));
var _rotatingFileStream = _interopRequireDefault(require("rotating-file-stream"));
require("./passport");
var _default = {
  setup: function setup(config) {
    var app = (0, _express["default"])();
    var accessLogStream = (0, _rotatingFileStream["default"])("access.log", {
      interval: "1d",
      path: _path["default"].join(__dirname, "..", "log")
    });
    app.use(_express["default"]["static"](_path["default"].join(__dirname, "../", "watermark")));
    app.use(_express["default"]["static"](_path["default"].join(__dirname, "../", "watermark_jpg")));
    app.use(_express["default"]["static"](_path["default"].join(__dirname, "../", "upload_avatar_product")));
    app.use('/x_image_blog', _express["default"]["static"](_path["default"].join(__dirname, "../", "x_image_blog")));
    app.use((0, _morgan["default"])(config.app.log, {
      stream: accessLogStream
    }));
    app.set("view engine", "html");
    app.use(_bodyParser["default"].urlencoded({
      extended: true,
      limit: "200mb",
      parameterLimit: 100000000
    }));
    app.use(_bodyParser["default"].json({
      limit: "200mb"
    }));
    app.use((0, _cookieParser["default"])(config.app.secret));
    app.use((0, _expressSession["default"])({
      secret: config.app.secret,
      resave: true,
      saveUninitialized: true
    }));
    app.use("/photo", _express["default"]["static"](_path["default"].join(__dirname, "public/images")));
    app.use(_passport["default"].initialize());
    app.use(_passport["default"].session());
    app.use((0, _expressSanitizer["default"])());
    app.use((0, _helmet["default"])());
    app.use(_helmet["default"].hsts({
      maxAge: 0
    }));
    Number.prototype.pad = function (size) {
      var s = String(this);
      while (s.length < (size || 2)) {
        s = "0" + s;
      }
      return s;
    };
    return app;
  }
};
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXhwcmVzcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX21vcmdhbiIsIl9wYXRoIiwiX3Bhc3Nwb3J0IiwiX2V4cHJlc3NTZXNzaW9uIiwiX2JvZHlQYXJzZXIiLCJfY29va2llUGFyc2VyIiwiX2V4cHJlc3NTYW5pdGl6ZXIiLCJfaGVsbWV0IiwiX3JvdGF0aW5nRmlsZVN0cmVhbSIsIl9kZWZhdWx0Iiwic2V0dXAiLCJjb25maWciLCJhcHAiLCJleHByZXNzIiwiYWNjZXNzTG9nU3RyZWFtIiwicmZzIiwiaW50ZXJ2YWwiLCJwYXRoIiwiam9pbiIsIl9fZGlybmFtZSIsInVzZSIsImxvZ2dlciIsImxvZyIsInN0cmVhbSIsInNldCIsImJvZHlQYXJzZXIiLCJ1cmxlbmNvZGVkIiwiZXh0ZW5kZWQiLCJsaW1pdCIsInBhcmFtZXRlckxpbWl0IiwianNvbiIsImNvb2tpZVBhcnNlciIsInNlY3JldCIsInNlc3Npb24iLCJyZXNhdmUiLCJzYXZlVW5pbml0aWFsaXplZCIsInBhc3Nwb3J0IiwiaW5pdGlhbGl6ZSIsImV4cHJlc3NTYW5pdGl6ZXIiLCJoZWxtZXQiLCJoc3RzIiwibWF4QWdlIiwiTnVtYmVyIiwicHJvdG90eXBlIiwicGFkIiwic2l6ZSIsInMiLCJTdHJpbmciLCJsZW5ndGgiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vc3JjL2FwcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXhwcmVzcyBmcm9tIFwiZXhwcmVzc1wiO1xyXG5pbXBvcnQgbG9nZ2VyIGZyb20gXCJtb3JnYW5cIjtcclxuaW1wb3J0IHBhdGggZnJvbSBcInBhdGhcIjtcclxuaW1wb3J0IHBhc3Nwb3J0IGZyb20gXCJwYXNzcG9ydFwiO1xyXG5pbXBvcnQgc2Vzc2lvbiBmcm9tIFwiZXhwcmVzcy1zZXNzaW9uXCI7XHJcbmltcG9ydCBib2R5UGFyc2VyIGZyb20gXCJib2R5LXBhcnNlclwiO1xyXG5pbXBvcnQgY29va2llUGFyc2VyIGZyb20gXCJjb29raWUtcGFyc2VyXCI7XHJcbmltcG9ydCBleHByZXNzU2FuaXRpemVyIGZyb20gXCJleHByZXNzLXNhbml0aXplclwiO1xyXG5pbXBvcnQgaGVsbWV0IGZyb20gXCJoZWxtZXRcIjtcclxuaW1wb3J0IHJmcyBmcm9tIFwicm90YXRpbmctZmlsZS1zdHJlYW1cIjtcclxuaW1wb3J0IFwiLi9wYXNzcG9ydFwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIHNldHVwOiAoY29uZmlnKSA9PiB7XHJcbiAgICBjb25zdCBhcHAgPSBleHByZXNzKCk7XHJcblxyXG4gICAgdmFyIGFjY2Vzc0xvZ1N0cmVhbSA9IHJmcyhcImFjY2Vzcy5sb2dcIiwge1xyXG4gICAgICBpbnRlcnZhbDogXCIxZFwiLFxyXG4gICAgICBwYXRoOiBwYXRoLmpvaW4oX19kaXJuYW1lLCBcIi4uXCIsIFwibG9nXCIpLFxyXG4gICAgfSk7XHJcbiAgICBhcHAudXNlKGV4cHJlc3Muc3RhdGljKHBhdGguam9pbihfX2Rpcm5hbWUsIFwiLi4vXCIsIFwid2F0ZXJtYXJrXCIpKSk7XHJcbiAgICBhcHAudXNlKGV4cHJlc3Muc3RhdGljKHBhdGguam9pbihfX2Rpcm5hbWUsIFwiLi4vXCIsIFwid2F0ZXJtYXJrX2pwZ1wiKSkpO1xyXG4gICAgYXBwLnVzZShleHByZXNzLnN0YXRpYyhwYXRoLmpvaW4oX19kaXJuYW1lLCBcIi4uL1wiLCBcInVwbG9hZF9hdmF0YXJfcHJvZHVjdFwiKSkpO1xyXG5cclxuICAgIGFwcC51c2UoJy94X2ltYWdlX2Jsb2cnICxleHByZXNzLnN0YXRpYyhwYXRoLmpvaW4oX19kaXJuYW1lLCBcIi4uL1wiLCBcInhfaW1hZ2VfYmxvZ1wiKSkpO1xyXG4gICAgYXBwLnVzZShsb2dnZXIoY29uZmlnLmFwcC5sb2csIHsgc3RyZWFtOiBhY2Nlc3NMb2dTdHJlYW0gfSkpO1xyXG4gICAgYXBwLnNldChcInZpZXcgZW5naW5lXCIsIFwiaHRtbFwiKTtcclxuICAgIGFwcC51c2UoYm9keVBhcnNlci51cmxlbmNvZGVkKHsgZXh0ZW5kZWQ6IHRydWUsIGxpbWl0OiBcIjIwMG1iXCIsIHBhcmFtZXRlckxpbWl0OjEwMDAwMDAwMCB9KSk7XHJcbiAgICBhcHAudXNlKGJvZHlQYXJzZXIuanNvbih7IGxpbWl0OiBcIjIwMG1iXCIgfSkpO1xyXG5cclxuICAgIGFwcC51c2UoY29va2llUGFyc2VyKGNvbmZpZy5hcHAuc2VjcmV0KSk7XHJcbiAgICBhcHAudXNlKFxyXG4gICAgICBzZXNzaW9uKHtcclxuICAgICAgICBzZWNyZXQ6IGNvbmZpZy5hcHAuc2VjcmV0LFxyXG4gICAgICAgIHJlc2F2ZTogdHJ1ZSxcclxuICAgICAgICBzYXZlVW5pbml0aWFsaXplZDogdHJ1ZSxcclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgICBhcHAudXNlKFwiL3Bob3RvXCIsIGV4cHJlc3Muc3RhdGljKHBhdGguam9pbihfX2Rpcm5hbWUsIFwicHVibGljL2ltYWdlc1wiKSkpO1xyXG4gICAgYXBwLnVzZShwYXNzcG9ydC5pbml0aWFsaXplKCkpO1xyXG4gICAgYXBwLnVzZShwYXNzcG9ydC5zZXNzaW9uKCkpO1xyXG4gICAgYXBwLnVzZShleHByZXNzU2FuaXRpemVyKCkpO1xyXG4gICAgYXBwLnVzZShoZWxtZXQoKSk7XHJcbiAgICBhcHAudXNlKFxyXG4gICAgICBoZWxtZXQuaHN0cyh7XHJcbiAgICAgICAgbWF4QWdlOiAwLFxyXG4gICAgICB9KVxyXG4gICAgKTtcclxuXHJcbiAgICBOdW1iZXIucHJvdG90eXBlLnBhZCA9IGZ1bmN0aW9uIChzaXplKSB7XHJcbiAgICAgIHZhciBzID0gU3RyaW5nKHRoaXMpO1xyXG4gICAgICB3aGlsZSAocy5sZW5ndGggPCAoc2l6ZSB8fCAyKSkge1xyXG4gICAgICAgIHMgPSBcIjBcIiArIHM7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHM7XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBhcHA7XHJcbiAgfSxcclxufTtcclxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FB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